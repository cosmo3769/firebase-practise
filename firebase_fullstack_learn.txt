---in firebase added project

--- firebase account(going to functions)
*npm install -g firebase-tools
*firebase login(login window will pop up and you have to login in)
*mkdir geoid-functions
*cd geoid-functions/
*firebase init(select functions and some basic questions)
--- firebase initialization complete

---change index.js
*firebase deploy
---gives error(make a google api insance, enable the cloud functions api)
---added some code in index.js and error is gone puff
const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

// The Firebase Admin SDK to access the Firebase Realtime Database.
const admin = require('firebase-admin');
admin.initializeApp();

exports.helloWorld = functions.https.onRequest((request, response) => {
 response.send("Hello world");
});

*firebase deploy --only functions
---functions deployed
---will give us function url
---copy it and paste it in insomnia with get and send it, hello world will be returned
---by the link we can also see the same in browser

---go to firebase page->database->get started->two modes->select test mode->set location to
   asia-south1 and done
---now it's ready to add collection
---so i added userHandle, createdAt, and body giving collection name scream

--- to connect with database we need admin sdk
---so added code to validate users and return access token to users so that users will later
   on use to request more data

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

// The Firebase Admin SDK to access the Firebase Realtime Database.
const admin = require('firebase-admin');
admin.initializeApp();

exports.helloWorld = functions.https.onRequest((request, response) => {
 response.send("Hello world");
});

exports.getScreams = functions.https.onRequest((req, res)=> {
    admin.firestore().collection('screams').get()
    .then(data => {
        let screams =[];
        data.forEach(doc => {
            screams.push(doc.data());
        });
        return res.json(screams);
    })
    .catch(err => console.error(err))
})

---above code will fetch data from firebase database(cloud firestore)(code was to get request)
*firebase deploy --only functions
---go back to insomnia for checking
---took the function url and get and send 
---we will get the data from database which we entered in database manually(add collection)

---code added to post request to database

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

const admin = require('firebase-admin');
admin.initializeApp();

exports.helloWorld = functions.https.onRequest((request, response) => {
  response.send("Hello from Firebase!");
});

exports.getScreams = functions.https.onRequest((req, res)=> {
    admin.firestore().collection('screams').get()
    .then(data => {
        let screams =[];
        data.forEach(doc => {
            screams.push(doc.data());
        });
        return res.json(screams);
    })
    .catch(err => console.error(err))
})

exports.createScream = functions.https.onRequest((req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: admin.firestore.Timestamp.fromDate(new Date())
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

*firebase serve
---copy and paste the function url in insomnia, post it with adding body and userHandle
   and it will be create in firebase datbase

--- added express in functions node modules
*npm install --save express
---changed the code

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

const admin = require('firebase-admin');
admin.initializeApp();

const express = require('express');
const app = express();

app.get('/screams', (req, res) => {
    admin.firestore().collection('screams').get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push(doc.data());
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


exports.createScream = functions.https.onRequest((req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: admin.firestore.Timestamp.fromDate(new Date())
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

// https://baseurl.com/api/

exports.api = functions.https.onRequest(app);

*firebase deploy
---chacked the functions page on firebase, we see two things are created, api and createScream

---changed the code again of index.js to add app.post

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

const admin = require('firebase-admin');
admin.initializeApp();

const express = require('express');
const app = express();

app.get('/screams', (req, res) => {
    admin.firestore().collection('screams').get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push(doc.data());
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: admin.firestore.Timestamp.fromDate(new Date())
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

// https://baseurl.com/api/

exports.api = functions.https.onRequest(app);

---this code will create api  in functions dashboard
---by there we can copy the link of api, add scream and firebase deploy
*firebase deploy
---added body, userHandle and post and send

---added some code again in app.get in index.js to get the screamid

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

const admin = require('firebase-admin');
admin.initializeApp();

const express = require('express');
const app = express();

app.get('/screams', (req, res) => {
    admin.firestore().collection('screams').get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: admin.firestore.Timestamp.fromDate(new Date())
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

// https://baseurl.com/api/

exports.api = functions.https.onRequest(app);

---same process to check

---added some code to get newly created user to show first in database

const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

const admin = require('firebase-admin');
admin.initializeApp();

const express = require('express');
const app = express();

app.get('/screams', (req, res) => {
    admin.firestore().collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

// https://baseurl.com/api/

exports.api = functions.https.onRequest(app);

---same process to check

---user registration part begins
---go  to firebase project console->authentication->enable email/password->project settings
   ->web->config object->copy->
---on terminal 
*cd functions
*npm install --save firebase
---added some code, modified too

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };




const firebase = require('firebase');
firebase.initializeApp(config);

app.get('/screams', (req, res) => {
    admin.firestore().collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    admin.firestore()
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    //    validate users

    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password)
        .then(data => {
            return res.status(201).json({ message: `user ${data.user.uid} signed up successfully`});
        })
        .catch(err => {
            console.error(err);
            return res.status(500).json({ error: err.code });
        });
});

exports.api = functions.https.onRequest(app);

---the code above has added firebase library as auth, config object so that it could know
   to which app it's connected
---added signup route(this is not for validating users till now)
*firebase deploy
---same process(created email,password and all)
---checking firebase authentication, we see that user@email.com and all the folloeing details 
   is stored,copy the id
---but firebase authentication is limited to store some details, so we need database where 
   we can create different collections(now manually, later programmatically)
---created collection as users->given user and not the autogenerated id->field->userid(paste
   the id)->createdAt->email
---so now this way any other user can't create with the same handle as user as it's 
   identified and email can't be as firebase itself will throw an error
---modifying the code again to validate users

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    //    validate users

    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then(data => {
          return data.user.getIdToken();
      })
      .then(token => {
          return res.status(201).json({token});
      })
      .catch(err => {
          console.error(err);
          return res.status(500).json({ error: err.code });
      });
});

exports.api = functions.https.onRequest(app);

---same process
---here we get the access token and this can be used to access the route that is protected
---if the same user registers, an err will occur

---so now it returns as error:auth/email-already-in-use, so added some if-else statement
   to get email already in use
---here's the code

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    //    validate users

    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then(data => {
          return data.user.getIdToken();
      })
      .then(token => {
          return res.status(201).json({token});
      })
      .catch(err => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
});

exports.api = functions.https.onRequest(app);

---now added some code so that the user registerd info can be stored in database

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    //    validate users

    let token, userId;
    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then((data) => {
          userId = data.user.uid;
          return data.user.getIdToken();
      })
      .then((idToken) => {
          token = idToken;
          const userCredentials = {
              handle: newUser.handle,
              email: newUser.email,
              createdAt: new Date().toISOString(),
              userId
          };
          return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
          return res.status(201).json({ token });
      })
      .catch(err => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
});

exports.api = functions.https.onRequest(app);

---deleted users database,authentication email created before
---same process, token is gen, and collection is made as users programmatically
   in database


*****validation and login route*****

---so now we validate the things added like email,password, confirm password, handle
---like is email is mot given the correct way it will give error
---if password dont match , an error
---if not correct handle, an error
---code is added(error validation)
---same process of check

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

const isEmail = (email) => {
    const regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(email.match(regEx)) return true;
    else return false;
}

const isEmpty = (string) => {
    if(string.trim() === '') return true;
    else return false;
}

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    let errors = {};

    if(isEmpty(newUser.email)) {
        errors.email ='Must not be empty'
    } else if(!isEmail(newUser.email)){
        errors.email = 'Must be a valid email address'
    }

    if(isEmpty(newUser.password)) errors.password = 'Must not be empty'
    if(newUser.password !==newUser.confirmPassword) errors.confirmPassword = 'Passwords must match';
    if(isEmpty(newUser.handle)) errors.handle = 'Must not be empty';

    if(Object.keys(errors).length > 0) return res.status(400).json(errors);

    //    validate users

    let token, userId;
    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then((data) => {
          userId = data.user.uid;
          return data.user.getIdToken();
      })
      .then((idToken) => {
          token = idToken;
          const userCredentials = {
              handle: newUser.handle,
              email: newUser.email,
              createdAt: new Date().toISOString(),
              userId
          };
          return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
          return res.status(201).json({ token });
      })
      .catch((err) => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
});

exports.api = functions.https.onRequest(app);

---login route added code below
---in this login route is added and error validation also, token also generated

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})


app.post('/scream', (req, res) => {
    const newScream = {
        body: req.body.body,
        userHandle: req.body.userHandle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

const isEmail = (email) => {
    const regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(email.match(regEx)) return true;
    else return false;
}

const isEmpty = (string) => {
    if(string.trim() === '') return true;
    else return false;
}

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    let errors = {};

    if(isEmpty(newUser.email)) {
        errors.email ='Must not be empty'
    } else if(!isEmail(newUser.email)){
        errors.email = 'Must be a valid email address'
    }

    if(isEmpty(newUser.password)) errors.password = 'Must not be empty'
    if(newUser.password !==newUser.confirmPassword) errors.confirmPassword = 'Passwords must match';
    if(isEmpty(newUser.handle)) errors.handle = 'Must not be empty';

    if(Object.keys(errors).length > 0) return res.status(400).json(errors);

    //    validate users

    let token, userId;
    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then((data) => {
          userId = data.user.uid;
          return data.user.getIdToken();
      })
      .then((idToken) => {
          token = idToken;
          const userCredentials = {
              handle: newUser.handle,
              email: newUser.email,
              createdAt: new Date().toISOString(),
              userId
          };
          return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
          return res.status(201).json({ token });
      })
      .catch((err) => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
});

app.post('/login', (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    let errors = {};

    if(isEmpty(user.email)) errors.email = 'Must not be empty';
    if(isEmpty(user.password)) errors.password = 'Must not be empty';

    if(Object.keys(errors).length > 0) return res.status(400).json(errors);

    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
});

exports.api = functions.https.onRequest(app);

---same process of check

*****authentication middleware*****

---till now route is not protected, when logged in data is not protected
---so this will help us to protect the route
---till now we have two routes, /screams which gets all the screams, post at 
   /scream which post one scream
---so we have to check the auth token whether the users have logged in or not, if only the users are logged in then only they can 
   post their screams in databse and no other person who is logged in, so we have to protect 
   this route
---second thing is we need to extract userhandle from that data and then submit
   into database
---so actually write the code that would obtain token and get data from it and make
   sure our request is authorized
---so code is added

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const app = require('express')();
admin.initializeApp();

const config = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };


const firebase = require('firebase');
firebase.initializeApp(config);

const db = admin.firestore();

app.get('/screams', (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then(data => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt
             });
        });
        return res.json(screams);
    })
    .catch((err) => console.error(err))
})

const FBAuth = (req, res, next) => {
    let idToken;
    if(req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
        idToken = req.headers.authorization.split('Bearer ')[1];

    } else {
        console.error('No token found')
        return res.status(403).json({ error: 'unauthorized'});
    }

    admin.auth().verifyIdToken(idToken)
       .then(decodedToken => {
           req.user = decodedToken;
           console.log(decodedToken);
           return db.collection('users')
              .where('userId', '==', req.user.uid)
              .limit(1)
              .get();
       })
       .then((data) => {
           req.user.handle = data.docs[0].data().handle;
           return next();
       })
       .catch(err => {
           console.error('Error while verifying token', err);
           return res.status(403).json(err);
       })
}

//post one scream

app.post('/scream', FBAuth, (req, res) => {
    if(req.body.body.trim() === '') {
        return res.status(400).json({ body: 'Body must not be empty' });
    }
    const newScream = {
        body: req.body.body,
        userHandle: req.user.handle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
});

const isEmail = (email) => {
    const regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(email.match(regEx)) return true;
    else return false;
}

const isEmpty = (string) => {
    if(string.trim() === '') return true;
    else return false;
}

//signup route

app.post('/signup', (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    let errors = {};

    if(isEmpty(newUser.email)) {
        errors.email ='Must not be empty'
    } else if(!isEmail(newUser.email)){
        errors.email = 'Must be a valid email address'
    }

    if(isEmpty(newUser.password)) errors.password = 'Must not be empty'
    if(newUser.password !==newUser.confirmPassword) errors.confirmPassword = 'Passwords must match';
    if(isEmpty(newUser.handle)) errors.handle = 'Must not be empty';

    if(Object.keys(errors).length > 0) return res.status(400).json(errors);

    //    validate users

    let token, userId;
    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then((data) => {
          userId = data.user.uid;
          return data.user.getIdToken();
      })
      .then((idToken) => {
          token = idToken;
          const userCredentials = {
              handle: newUser.handle,
              email: newUser.email,
              createdAt: new Date().toISOString(),
              userId
          };
          return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
          return res.status(201).json({ token });
      })
      .catch((err) => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
});

app.post('/login', (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    let errors = {};

    if(isEmpty(user.email)) errors.email = 'Must not be empty';
    if(isEmpty(user.password)) errors.password = 'Must not be empty';

    if(Object.keys(errors).length > 0) return res.status(400).json(errors);

    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
});

exports.api = functions.https.onRequest(app);

---now when user login the token is generated 
---we create the header Bearer with authorizarion in insomnia
---putting the token in this as Bearer token and posting the scream, the scream 
   is posted 
---so whenever the route is protected,we need to use FBAuth as middleware

*****Refactoring and Organizing*****

---we placed the codes in different files

---index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { getAllScreams, postOneScream } = require('./handlers/screams');
const { signup, login } = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);

//users routes
app.post('/signup', signup);
app.post('/login', login);




exports.api = functions.https.onRequest(app);

---util->config.js

module.exports = {
    apiKey: "AIzaSyCsRIaButC1b8hKGc3AHB4zFUkClsCvzJM",
    authDomain: "practise-58dec.firebaseapp.com",
    databaseURL: "https://practise-58dec.firebaseio.com",
    projectId: "practise-58dec",
    storageBucket: "practise-58dec.appspot.com",
    messagingSenderId: "640045630822",
    appId: "1:640045630822:web:0e376138078a3fe0c334a7",
    measurementId: "G-R1LKQSG5M9"
  };

---util->admin.js

const admin = require('firebase-admin');

admin.initializeApp();

const db = admin.firestore();

module.exports = { admin, db };

---util->fbAuth.js

const { admin, db } = require('./admin');

module.exports = (req, res, next) => {
    let idToken;
    if(req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
        idToken = req.headers.authorization.split('Bearer ')[1];

    } else {
        console.error('No token found')
        return res.status(403).json({ error: 'unauthorized'});
    }

    admin.auth().verifyIdToken(idToken)
       .then(decodedToken => {
           req.user = decodedToken;
           console.log(decodedToken);
           return db.collection('users')
              .where('userId', '==', req.user.uid)
              .limit(1)
              .get();
       })
       .then((data) => {
           req.user.handle = data.docs[0].data().handle;
           return next();
       })
       .catch(err => {
           console.error('Error while verifying token', err);
           return res.status(403).json(err);
       })
};

---util->validators.js

const isEmail = (email) => {
    const regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(email.match(regEx)) return true;
    else return false;
};

const isEmpty = (string) => {
    if(string.trim() === '') return true;
    else return false;
};

exports.validateSignupData = (data) => {
    let errors = {};
  
    if (isEmpty(data.email)) {
      errors.email = 'Must not be empty';
    } else if (!isEmail(data.email)) {
      errors.email = 'Must be a valid email address';
    }
  
    if (isEmpty(data.password)) errors.password = 'Must not be empty';
    if (data.password !== data.confirmPassword)
      errors.confirmPassword = 'Passwords must match';
    if (isEmpty(data.handle)) errors.handle = 'Must not be empty';
  
    return {
      errors,
      valid: Object.keys(errors).length === 0 ? true : false
    };
  };
  
  exports.validateLoginData = (data) => {
    let errors = {};
  
    if (isEmpty(data.email)) errors.email = 'Must not be empty';
    if (isEmpty(data.password)) errors.password = 'Must not be empty';
  
    return {
      errors,
      valid: Object.keys(errors).length === 0 ? true : false
    };
  };
  

---handlers->screams.js

const { db } = require('../util/admin');

exports.getAllScreams = (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then((data) => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt,
                commentCount: doc.data().commentCount,
                likeCount: doc.data().likeCount
             });
        });
        return res.json(screams);
    })
    .catch((err) => {
        console.error(err);
        res.status(500).json({ error: err.code });
});
};

exports.postOneScream = (req, res) => {
    if(req.body.body.trim() === '') {
        return res.status(400).json({ body: 'Body must not be empty' });
    }
    const newScream = {
        body: req.body.body,
        userHandle: req.user.handle,
        createdAt: new Date().toISOString()
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
};

---handlers->users.js

const { db } = require('../util/admin');

const config = require('../util/config');

const firebase = require('firebase');
firebase.initializeApp(config)

const {
    validateSignupData,
    validateLoginData
  } = require('../util/validators');

exports.signup = (req, res) =>{
    const newUser = {
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword,
        handle: req.body.handle,
    };

    const { valid, errors } = validateSignupData(newUser);

    if (!valid) return res.status(400).json(errors);

    //    validate users

    let token, userId;
    db.doc(`/users/${newUser.handle}`).get()
      .then(doc => {
          if(doc.exists){
              return res.status(400).json({ handle: 'this handle is already taken' });
          } else {
              return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);
          }
      })
      .then((data) => {
          userId = data.user.uid;
          return data.user.getIdToken();
      })
      .then((idToken) => {
          token = idToken;
          const userCredentials = {
              handle: newUser.handle,
              email: newUser.email,
              createdAt: new Date().toISOString(),
              userId
          };
          return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
          return res.status(201).json({ token });
      })
      .catch((err) => {
          console.error(err);
          if(error.code === 'auth/email-already-in-use'){
              return res.status(400).json({ email: 'Email is already in use' });
          } else {
          return res.status(500).json({ error: err.code });
          }
      });
};

exports.login =  (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    const { valid, errors } = validateLoginData(user);

    if (!valid) return res.status(400).json(errors);

    
    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
};


*****Image Upload*****

*npm install --save busboy (in functions)
---added the code(show later on)
---go to firebase console->storage->get started->downloaded and saved as no-image.png 
   locally->upload file->

---added code in users.js

const { admin, db } = require('../util/admin');

const config = require('../util/config');

const firebase = require('firebase');
firebase.initializeApp(config)

const {
    validateSignupData,
    validateLoginData
  } = require('../util/validators');


  //signup 

  exports.signup = (req, res) => {
    const newUser = {
      email: req.body.email,
      password: req.body.password,
      confirmPassword: req.body.confirmPassword,
      handle: req.body.handle
    };
  
    const { valid, errors } = validateSignupData(newUser);
  
    if (!valid) return res.status(400).json(errors);
  
    const noImg = 'no-image.png';
  
    let token, userId;
    db.doc(`/users/${newUser.handle}`)
      .get()
      .then((doc) => {
        if (doc.exists) {
          return res.status(400).json({ handle: 'this handle is already taken' });
        } else {
          return firebase
            .auth()
            .createUserWithEmailAndPassword(newUser.email, newUser.password);
        }
      })
      .then((data) => {
        userId = data.user.uid;
        return data.user.getIdToken();
      })
      .then((idToken) => {
        token = idToken;
        const userCredentials = {
          handle: newUser.handle,
          email: newUser.email,
          createdAt: new Date().toISOString(),
          imageUrl: `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${noImg}?alt=media`,
          userId
        };
        return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
        return res.status(201).json({ token });
      })
      .catch((err) => {
        console.error(err);
        if (err.code === 'auth/email-already-in-use') {
          return res.status(400).json({ email: 'Email is already is use' });
        } else {
          return res
            .status(500)
            .json({ general: 'Something went wrong, please try again' });
        }
      });
  };

//login

exports.login =  (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    const { valid, errors } = validateLoginData(user);

    if (!valid) return res.status(400).json(errors);

    
    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
};

//uploadImage

exports.uploadImage = (req, res) => {
    const BusBoy = require('busboy');
    const path = require('path');
    const os = require('os');
    const fs = require('fs');
  
    const busboy = new BusBoy({ headers: req.headers });
  
    let imageToBeUploaded = {};
    let imageFileName;
  
    busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {
      console.log(fieldname, file, filename, encoding, mimetype);
      if (mimetype !== 'image/jpeg' && mimetype !== 'image/png') {
        return res.status(400).json({ error: 'Wrong file type submitted' });
      }
      // my.image.png => ['my', 'image', 'png']
      const imageExtension = filename.split('.')[filename.split('.').length - 1];
      // 32756238461724837.png
      imageFileName = `${Math.round(
        Math.random() * 1000000000000
      ).toString()}.${imageExtension}`;
      const filepath = path.join(os.tmpdir(), imageFileName);
      imageToBeUploaded = { filepath, mimetype };
      file.pipe(fs.createWriteStream(filepath));
    });
    busboy.on('finish', () => {
      admin
        .storage()
        .bucket()
        .upload(imageToBeUploaded.filepath, {
          resumable: false,
          metadata: {
            metadata: {
              contentType: imageToBeUploaded.mimetype
            }
          }
        })
        .then(() => {
          const imageUrl = `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${imageFileName}?alt=media`;
          return db.doc(`/users/${req.user.handle}`).update({ imageUrl });
        })
        .then(() => {
          return res.json({ message: 'image uploaded successfully' });
        })
        .catch((err) => {
          console.error(err);
          return res.status(500).json({ error: 'something went wrong' });
        });
    });
    busboy.end(req.rawBody);
  };

---added code in index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { getAllScreams, postOneScream } = require('./handlers/screams');
const { signup, login, uploadImage } = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);

//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);




exports.api = functions.https.onRequest(app);

---same process
---copied the image url from the database that we created by signingup a new user
---checked on browser, gave an error
---went to firebase storage->rules-
---these were the rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}

---changed the rules coz we are not using any client library but are using authentication
   using cloud functions

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read;
    }
  }
}

---so this way we can see the image using image url 
---now added the different photo
---in insomnia, some process is done(/user/image route, added token in bearer, 
   made multipart->image->added file and send
---new photo is uploaded of the user which has it's gen token
---note: it only take image and not text type or any other file type(mimetype condition)


*****Add and Get User Profile Details*****

---changed code in index.js(added route)

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { getAllScreams, postOneScream } = require('./handlers/screams');
const { signup, login, uploadImage, addUserDetails } = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);

//users routes
app.post('/signup', signup);
app.post('/login', login);





exports.api = functions.https.onRequest(app);

---changed code in validators.js

const isEmail = (email) => {
    const regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(email.match(regEx)) return true;
    else return false;
};

const isEmpty = (string) => {
    if(string.trim() === '') return true;
    else return false;
};

exports.validateSignupData = (data) => {
    let errors = {};
  
    if (isEmpty(data.email)) {
      errors.email = 'Must not be empty';
    } else if (!isEmail(data.email)) {
      errors.email = 'Must be a valid email address';
    }
  
    if (isEmpty(data.password)) errors.password = 'Must not be empty';
    if (data.password !== data.confirmPassword)
      errors.confirmPassword = 'Passwords must match';
    if (isEmpty(data.handle)) errors.handle = 'Must not be empty';
  
    return {
      errors,
      valid: Object.keys(errors).length === 0 ? true : false
    };
  };
  
  exports.validateLoginData = (data) => {
    let errors = {};
  
    if (isEmpty(data.email)) errors.email = 'Must not be empty';
    if (isEmpty(data.password)) errors.password = 'Must not be empty';
  
    return {
      errors,
      valid: Object.keys(errors).length === 0 ? true : false
    };
  };

  exports.reduceUserDetails = (data) => {
    let userDetails = {};

    if(!isEmpty(data.location.trim())) userDetails.location = data.location;

    return userDetails;
  };
  
---changed code in users.js

const { admin, db } = require('../util/admin');

const config = require('../util/config');

const firebase = require('firebase');
firebase.initializeApp(config)

const {
    validateSignupData,
    validateLoginData,
    reduceUserDetails
  } = require('../util/validators');


  //signup 

  exports.signup = (req, res) => {
    const newUser = {
      email: req.body.email,
      password: req.body.password,
      confirmPassword: req.body.confirmPassword,
      handle: req.body.handle
    };
  
    const { valid, errors } = validateSignupData(newUser);
  
    if (!valid) return res.status(400).json(errors);
  
    const noImg = 'no-image.png';
  
    let token, userId;
    db.doc(`/users/${newUser.handle}`)
      .get()
      .then((doc) => {
        if (doc.exists) {
          return res.status(400).json({ handle: 'this handle is already taken' });
        } else {
          return firebase
            .auth()
            .createUserWithEmailAndPassword(newUser.email, newUser.password);
        }
      })
      .then((data) => {
        userId = data.user.uid;
        return data.user.getIdToken();
      })
      .then((idToken) => {
        token = idToken;
        const userCredentials = {
          handle: newUser.handle,
          email: newUser.email,
          createdAt: new Date().toISOString(),
          imageUrl: `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${noImg}?alt=media`,
          userId
        };
        return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
        return res.status(201).json({ token });
      })
      .catch((err) => {
        console.error(err);
        if (err.code === 'auth/email-already-in-use') {
          return res.status(400).json({ email: 'Email is already is use' });
        } else {
          return res
            .status(500)
            .json({ general: 'Something went wrong, please try again' });
        }
      });
  };

//login

exports.login =  (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    const { valid, errors } = validateLoginData(user);

    if (!valid) return res.status(400).json(errors);

    
    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
};

//Add user details

exports.addUserDetails = (req, res) => {
  let userDetails = reduceUserDetails(req.body);

  db.doc(`/users/${req.user.handle}`)
    .update(userDetails)
    .then(() => {
      return res.json({ message: 'Details added successfully' });
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};

//Upload a profile image for user



//uploadImage

exports.uploadImage = (req, res) => {
    const BusBoy = require('busboy');
    const path = require('path');
    const os = require('os');
    const fs = require('fs');
  
    const busboy = new BusBoy({ headers: req.headers });
  
    let imageToBeUploaded = {};
    let imageFileName;
  
    busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {
      console.log(fieldname, file, filename, encoding, mimetype);
      if (mimetype !== 'image/jpeg' && mimetype !== 'image/png') {
        return res.status(400).json({ error: 'Wrong file type submitted' });
      }
      // my.image.png => ['my', 'image', 'png']
      const imageExtension = filename.split('.')[filename.split('.').length - 1];
      // 32756238461724837.png
      imageFileName = `${Math.round(
        Math.random() * 1000000000000
      ).toString()}.${imageExtension}`;
      const filepath = path.join(os.tmpdir(), imageFileName);
      imageToBeUploaded = { filepath, mimetype };
      file.pipe(fs.createWriteStream(filepath));
    });
    busboy.on('finish', () => {
      admin
        .storage()
        .bucket()
        .upload(imageToBeUploaded.filepath, {
          resumable: false,
          metadata: {
            metadata: {
              contentType: imageToBeUploaded.mimetype
            }
          }
        })
        .then(() => {
          const imageUrl = `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${imageFileName}?alt=media`;
          return db.doc(`/users/${req.user.handle}`).update({ imageUrl });
        })
        .then(() => {
          return res.json({ message: 'image uploaded successfully' });
        })
        .catch((err) => {
          console.error(err);
          return res.status(500).json({ error: 'something went wrong' });
        });
    });
    busboy.end(req.rawBody);
  };

---same process 
---/login->token generated->Bearer ->/user->added location->send->added in database

---now to get the data in frontend
---added route in index.js(get own user details like credentials, email,userid,created at,
   location)

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { getAllScreams, postOneScream } = require('./handlers/screams');
const { signup, login, uploadImage, addUserDetails, getAuthenticatedUser } = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);

//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);

exports.api = functions.https.onRequest(app);

---changed code in users.js

const { admin, db } = require('../util/admin');

const config = require('../util/config');

const firebase = require('firebase');
firebase.initializeApp(config)

const {
    validateSignupData,
    validateLoginData,
    reduceUserDetails
  } = require('../util/validators');


  //signup 

  exports.signup = (req, res) => {
    const newUser = {
      email: req.body.email,
      password: req.body.password,
      confirmPassword: req.body.confirmPassword,
      handle: req.body.handle
    };
  
    const { valid, errors } = validateSignupData(newUser);
  
    if (!valid) return res.status(400).json(errors);
  
    const noImg = 'no-image.png';
  
    let token, userId;
    db.doc(`/users/${newUser.handle}`)
      .get()
      .then((doc) => {
        if (doc.exists) {
          return res.status(400).json({ handle: 'this handle is already taken' });
        } else {
          return firebase
            .auth()
            .createUserWithEmailAndPassword(newUser.email, newUser.password);
        }
      })
      .then((data) => {
        userId = data.user.uid;
        return data.user.getIdToken();
      })
      .then((idToken) => {
        token = idToken;
        const userCredentials = {
          handle: newUser.handle,
          email: newUser.email,
          createdAt: new Date().toISOString(),
          imageUrl: `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${noImg}?alt=media`,
          userId
        };
        return db.doc(`/users/${newUser.handle}`).set(userCredentials);
      })
      .then(() => {
        return res.status(201).json({ token });
      })
      .catch((err) => {
        console.error(err);
        if (err.code === 'auth/email-already-in-use') {
          return res.status(400).json({ email: 'Email is already is use' });
        } else {
          return res
            .status(500)
            .json({ general: 'Something went wrong, please try again' });
        }
      });
  };

//login

exports.login =  (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    };

    const { valid, errors } = validateLoginData(user);

    if (!valid) return res.status(400).json(errors);

    
    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
       .then((data) => {
           return data.user.getIdToken();
       })
       .then((token) => {
           return res.json({ token });
       })
       .catch((err) => {
           console.error(err);
           if(err.code === 'auth/wrong-password'){
               return res.status(403).json({ general: 'Wrong credentials, please try again'});
           }
           else return res.status(500).json({ error: err.code });
           
       });
};

//Add user details

exports.addUserDetails = (req, res) => {
  let userDetails = reduceUserDetails(req.body);

  db.doc(`/users/${req.user.handle}`)
    .update(userDetails)
    .then(() => {
      return res.json({ message: 'Details added successfully' });
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};


// Get own user details
exports.getAuthenticatedUser = (req, res) => {
  let userData = {};
  db.doc(`/users/${req.user.handle}`)
    .get()
    .then((doc) => {
      if (doc.exists) {
        userData.credentials = doc.data();
        return db
          .collection('likes')
          .where('userHandle', '==', req.user.handle)
          .get();
      }
    })
    .then((data) => {
      userData.likes = [];
      data.forEach((doc) => {
        userData.likes.push(doc.data());
      });
  
      return res.json(userData);
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};

//Upload a profile image for user
exports.uploadImage = (req, res) => {
    const BusBoy = require('busboy');
    const path = require('path');
    const os = require('os');
    const fs = require('fs');
  
    const busboy = new BusBoy({ headers: req.headers });
  
    let imageToBeUploaded = {};
    let imageFileName;
  
    busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {
      console.log(fieldname, file, filename, encoding, mimetype);
      if (mimetype !== 'image/jpeg' && mimetype !== 'image/png') {
        return res.status(400).json({ error: 'Wrong file type submitted' });
      }
      // my.image.png => ['my', 'image', 'png']
      const imageExtension = filename.split('.')[filename.split('.').length - 1];
      // 32756238461724837.png
      imageFileName = `${Math.round(
        Math.random() * 1000000000000
      ).toString()}.${imageExtension}`;
      const filepath = path.join(os.tmpdir(), imageFileName);
      imageToBeUploaded = { filepath, mimetype };
      file.pipe(fs.createWriteStream(filepath));
    });
    busboy.on('finish', () => {
      admin
        .storage()
        .bucket()
        .upload(imageToBeUploaded.filepath, {
          resumable: false,
          metadata: {
            metadata: {
              contentType: imageToBeUploaded.mimetype
            }
          }
        })
        .then(() => {
          const imageUrl = `https://firebasestorage.googleapis.com/v0/b/${
            config.storageBucket
          }/o/${imageFileName}?alt=media`;
          return db.doc(`/users/${req.user.handle}`).update({ imageUrl });
        })
        .then(() => {
          return res.json({ message: 'image uploaded successfully' });
        })
        .catch((err) => {
          console.error(err);
          return res.status(500).json({ error: 'something went wrong' });
        });
    });
    busboy.end(req.rawBody);
  };

---added route in index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { 
    getAllScreams, 
    postOneScream,
    getImage
} = require('./handlers/screams');

const { 
    signup, 
    login, 
    uploadImage, 
    addUserDetails, 
    getAuthenticatedUser 
} = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
// app.get('/scream/:screamId', getScream);
// app.post('/scream/:screamId/comment', FBAuth, commentOnScream);
app.get('/scream/:screamId', getImage);




//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);

exports.api = functions.https.onRequest(app);

---created database collection 'image'(field: createdAt, screamId, location->geopoint(latitude, longitude), ImageUrl)
---added code in screams.js(fetch added database as scream)

const { admin, db } = require('../util/admin');



exports.getAllScreams = (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then((data) => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt,
                commentCount: doc.data().commentCount,
                likeCount: doc.data().likeCount,
             });
        });
        return res.json(screams);
    })
    .catch((err) => {
        console.error(err);
        res.status(500).json({ error: err.code });
});
};

exports.postOneScream = (req, res) => {
    if(req.body.body.trim() === '') {
        return res.status(400).json({ body: 'Body must not be empty' });
    }
    const newScream = {
        body: req.body.body,
        userHandle: req.user.handle,
        createdAt: new Date().toISOString(),
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
};

//Fetch image & geolocation or one scream

exports.getImage = (req, res) => {
    let screamData = {};
    db.doc(`/screams/${req.params.screamId}`)
      .get()
      .then((doc) => {
        if (!doc.exists) {
          return res.status(404).json({ error: 'Scream not found' });
        }
        screamData = doc.data();
        screamData.screamId = doc.id;
        return db
          .collection('image')
          .where('screamId', '==', req.params.screamId)
          .get();
      })
      .then((data) => {
        screamData.image = [];
        data.forEach((doc) => {
          screamData.image.push(doc.data());
        });
        return res.json(screamData);
      })
      .catch((err) => {
        console.error(err);
        res.status(500).json({ error: err.code });
      });
  };

---& we are getting the added database with full screams database

---now to post image url with geofencing feature

---comment getting from database created manuaaly(createdAt->copied from scream created, screamId->same, userHandle, body)
---added code in index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { 
    getAllScreams, 
    postOneScream,
    getScream,
    commentOnScream
} = require('./handlers/screams');

const { 
    signup, 
    login, 
    uploadImage, 
    addUserDetails, 
    getAuthenticatedUser 
} = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
app.get('/scream/:screamId', getScream);
app.post('/scream/:screamId/comment', FBAuth, commentOnScream);
// app.get('/scream/:screamId', getImage);
// app.post('/scream/:screamId/image', FBAuth, imageOnScream);




//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);

exports.api = functions.https.onRequest(app);

---added code in scream.js

const { admin, db } = require('../util/admin');



exports.getAllScreams = (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then((data) => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt,
                commentCount: doc.data().commentCount,
                likeCount: doc.data().likeCount,
             });
        });
        return res.json(screams);
    })
    .catch((err) => {
        console.error(err);
        res.status(500).json({ error: err.code });
});
};

exports.postOneScream = (req, res) => {
    if(req.body.body.trim() === '') {
        return res.status(400).json({ body: 'Body must not be empty' });
    }
    const newScream = {
        body: req.body.body,
        userHandle: req.user.handle,
        createdAt: new Date().toISOString(),
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
            res.json({ message:`document ${doc.id} created successfully`});
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
};

//fetch comments or one scream

exports.getScream = (req, res) => {
  let screamData = {};
  db.doc(`/screams/${req.params.screamId}`)
    .get()
    .then((doc) => {
      if (!doc.exists) {
        return res.status(404).json({ error: 'Scream not found' });
      }
      screamData = doc.data();
      screamData.screamId = doc.id;
      return db
        .collection('comments')
        .where('screamId', '==', req.params.screamId)
        .get();
    })
    .then((data) => {
      screamData.comments = [];
      data.forEach((doc) => {
        screamData.comments.push(doc.data());
      });
      return res.json(screamData);
    })
    .catch((err) => {
      console.error(err);
      res.status(500).json({ error: err.code });
    });
};

 //comment

 exports.commentOnScream = (req, res) => {
  if (req.body.body.trim() === '')
    return res.status(400).json({ comment: 'Must not be empty' });

  const newComment = {
    body: req.body.body,
    createdAt: new Date().toISOString(),
    screamId: req.params.screamId,
    userHandle: req.user.handle,
    userImage: req.user.imageUrl
  };
  console.log(newComment);

  db.doc(`/screams/${req.params.screamId}`)
    .get()
    .then((doc) => {
      if (!doc.exists) {
        return res.status(404).json({ error: 'Scream not found' });
      }
      return doc.ref.update({ commentCount: doc.data().commentCount + 1 });
    })
    .then(() => {
      return db.collection('comments').add(newComment);
    })
    .then(() => {
      res.json(newComment);
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ error: 'Something went wrong' });
    });
};

// //Fetch image & geolocation or one scream

// exports.getImage = (req, res) => {
//     let screamData = {};
//     db.doc(`/screams/${req.params.screamId}`)
//       .get()
//       .then((doc) => {
//         if (!doc.exists) {
//           return res.status(404).json({ error: 'Scream not found' });
//         }
//         screamData = doc.data();
//         screamData.screamId = doc.id;
//         return db
//           .collection('image')
//           .where('screamId', '==', req.params.screamId)
//           .get();
//       })
//       .then((data) => {
//         screamData.image = [];
//         data.forEach((doc) => {
//           screamData.image.push(doc.data());
//         });
//         return res.json(screamData);
//       })
//       .catch((err) => {
//         console.error(err);
//         res.status(500).json({ error: err.code });
//       });
//   };

---post comment on scream
---added code in scream.js(both done with above code)

---like and unlike scream
---added code in index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { 
    getAllScreams, 
    postOneScream,
    getScream,
    commentOnScream,
    likeScream,
    unlikeScream
} = require('./handlers/screams');

const { 
    signup, 
    login, 
    uploadImage, 
    addUserDetails, 
    getAuthenticatedUser 
} = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
app.get('/scream/:screamId', getScream);
app.post('/scream/:screamId/comment', FBAuth, commentOnScream);
app.get('/scream/:screamId/like', FBAuth, likeScream);
app.get('/scream/:screamId/unlike', FBAuth, unlikeScream);

// app.get('/scream/:screamId', getImage);
// app.post('/scream/:screamId/image', FBAuth, imageOnScream);




//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);

exports.api = functions.https.onRequest(app);

---added code in scream.js(like and unlike)

const { admin, db } = require('../util/admin');



exports.getAllScreams = (req, res) => {
    db.collection('screams')
    .orderBy('createdAt', 'desc')
    .get()
    .then((data) => {
        let screams =[];
        data.forEach((doc) => {
            screams.push({
                screamId: doc.id,
                body: doc.data().body,
                userHandle: doc.data().userHandle,
                createdAt: doc.data().createdAt,
                commentCount: doc.data().commentCount,
                likeCount: doc.data().likeCount,
             });
        });
        return res.json(screams);
    })
    .catch((err) => {
        console.error(err);
        res.status(500).json({ error: err.code });
});
};

exports.postOneScream = (req, res) => {
    if(req.body.body.trim() === '') {
        return res.status(400).json({ body: 'Body must not be empty' });
    }
    const newScream = {
        body: req.body.body,
        userHandle: req.user.handle,
        createdAt: new Date().toISOString(),
        likeCount: 0,
        commentCount: 0
    };

    db
        .collection('screams')
        .add(newScream)
        .then(doc => {
          const resScream =newScream;
          resScream.screamId = doc.id;
            res.json(resScream);
        })
        .catch(err => {
            res.status(500).json({error: `something wrong`});
            console.error(err);
        });
};

//fetch comments or one scream

exports.getScream = (req, res) => {
  let screamData = {};
  db.doc(`/screams/${req.params.screamId}`)
    .get()
    .then((doc) => {
      if (!doc.exists) {
        return res.status(404).json({ error: 'Scream not found' });
      }
      screamData = doc.data();
      screamData.screamId = doc.id;
      return db
        .collection('comments')
        .where('screamId', '==', req.params.screamId)
        .get();
    })
    .then((data) => {
      screamData.comments = [];
      data.forEach((doc) => {
        screamData.comments.push(doc.data());
      });
      return res.json(screamData);
    })
    .catch((err) => {
      console.error(err);
      res.status(500).json({ error: err.code });
    });
};

 //comment

 exports.commentOnScream = (req, res) => {
  if (req.body.body.trim() === '')
    return res.status(400).json({ comment: 'Must not be empty' });

  const newComment = {
    body: req.body.body,
    createdAt: new Date().toISOString(),
    screamId: req.params.screamId,
    userHandle: req.user.handle
  };
  console.log(newComment);

  db.doc(`/screams/${req.params.screamId}`)
    .get()
    .then((doc) => {
      if (!doc.exists) {
        return res.status(404).json({ error: 'Scream not found' });
      }
      return doc.ref.update({ commentCount: doc.data().commentCount + 1 });
    })
    .then(() => {
      return db.collection('comments').add(newComment);
    })
    .then(() => {
      res.json(newComment);
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json({ error: 'Something went wrong' });
    });
};

//like a scream

exports.likeScream = (req, res) => {
  const likeDocument = db
    .collection('likes')
    .where('userHandle', '==', req.user.handle)
    .where('screamId', '==', req.params.screamId)
    .limit(1);

  const screamDocument = db.doc(`/screams/${req.params.screamId}`);

  let screamData;

  screamDocument
    .get()
    .then((doc) => {
      if (doc.exists) {
        screamData = doc.data();
        screamData.screamId = doc.id;
        return likeDocument.get();
      } else {
        return res.status(404).json({ error: 'Scream not found' });
      }
    })
    .then((data) => {
      if (data.empty) {
        return db
          .collection('likes')
          .add({
            screamId: req.params.screamId,
            userHandle: req.user.handle
          })
          .then(() => {
            screamData.likeCount++;
            return screamDocument.update({ likeCount: screamData.likeCount });
          })
          .then(() => {
            return res.json(screamData);
          });
      } else {
        return res.status(400).json({ error: 'Scream already liked' });
      }
    })
    .catch((err) => {
      console.error(err);
      res.status(500).json({ error: err.code });
    });
};

//unlikeScream

exports.unlikeScream = (req, res) => {
  const likeDocument = db
    .collection('likes')
    .where('userHandle', '==', req.user.handle)
    .where('screamId', '==', req.params.screamId)
    .limit(1);

  const screamDocument = db.doc(`/screams/${req.params.screamId}`);

  let screamData;

  screamDocument
    .get()
    .then((doc) => {
      if (doc.exists) {
        screamData = doc.data();
        screamData.screamId = doc.id;
        return likeDocument.get();
      } else {
        return res.status(404).json({ error: 'Scream not found' });
      }
    })
    .then((data) => {
      if (data.empty) {
        return res.status(400).json({ error: 'Scream not liked' });
      } else {
        return db
          .doc(`/likes/${data.docs[0].id}`)
          .delete()
          .then(() => {
            screamData.likeCount--;
            return screamDocument.update({ likeCount: screamData.likeCount });
          })
          .then(() => {
            res.json(screamData);
          });
      }
    })
    .catch((err) => {
      console.error(err);
      res.status(500).json({ error: err.code });
    });
};

// //Fetch image & geolocation or one scream

// exports.getImage = (req, res) => {
//     let screamData = {};
//     db.doc(`/screams/${req.params.screamId}`)
//       .get()
//       .then((doc) => {
//         if (!doc.exists) {
//           return res.status(404).json({ error: 'Scream not found' });
//         }
//         screamData = doc.data();
//         screamData.screamId = doc.id;
//         return db
//           .collection('image')
//           .where('screamId', '==', req.params.screamId)
//           .get();
//       })
//       .then((data) => {
//         screamData.image = [];
//         data.forEach((doc) => {
//           screamData.image.push(doc.data());
//         });
//         return res.json(screamData);
//       })
//       .catch((err) => {
//         console.error(err);
//         res.status(500).json({ error: err.code });
//       });
//   };

---first created the database collection 'likes'(field->createdAt, userHandle)
---same process
---so if i will like the scream, a document under likes collection will be created
   and scream likecount will strat showing 1
---when we unlike it, doc will be deleted from like collection and scream likecount will
   come back to 0
---comments have the same feature(count bug though)

---delete the scream
---added route in index.js
---added code of delete scream in screams.js

//delete a scream

exports.deleteScream = (req, res) => {
  const document = db.doc(`/screams/${req.params.screamId}`);
  document
    .get()
    .then((doc) => {
      if (!doc.exists) {
        return res.status(404).json({ error: 'Scream not found' });
      }
      if (doc.data().userHandle !== req.user.handle) {
        return res.status(403).json({ error: 'Unauthorized' });
      } else {
        return document.delete();
      }
    })
    .then(() => {
      res.json({ message: 'Scream deleted successfully' });
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};

---same process(deleted successfully)

---added code in index.js

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { db } = require('./util/admin');

const { 
    getAllScreams, 
    postOneScream,
    getScream,
    commentOnScream,
    likeScream,
    unlikeScream,
    deleteScream
} = require('./handlers/screams');

const { 
    signup, 
    login, 
    uploadImage, 
    addUserDetails, 
    getAuthenticatedUser 
} = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
app.get('/scream/:screamId', getScream);
app.post('/scream/:screamId/comment', FBAuth, commentOnScream);
app.get('/scream/:screamId/like', FBAuth, likeScream);
app.get('/scream/:screamId/unlike', FBAuth, unlikeScream);
app.delete('/scream/:screamId', FBAuth, deleteScream);

// app.get('/scream/:screamId', getImage);
// app.post('/scream/:screamId/image', FBAuth, imageOnScream);




//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);

exports.api = functions.region('europe-west1').https.onRequest(app);

exports.createNotificationOnLike = functions
  .region('europe-west1')
  .firestore.document('likes/{id}')
  .onCreate((snapshot) => {
    return db
      .doc(`/screams/${snapshot.data().screamId}`)
      .get()
      .then((doc) => {
        if (
          doc.exists &&
          doc.data().userHandle !== snapshot.data().userHandle
        ) {
          return db.doc(`/notifications/${snapshot.id}`).set({
            createdAt: new Date().toISOString(),
            recipient: doc.data().userHandle,
            sender: snapshot.data().userHandle,
            type: 'like',
            read: false,
            screamId: doc.id
          });
        }
      })
      .catch((err) => console.error(err));
  });

  exports.deleteNotificationOnUnLike = functions
  .region('europe-west1')
  .firestore.document('likes/{id}')
  .onDelete((snapshot) => {
    return db
      .doc(`/notifications/${snapshot.id}`)
      .delete()
      .catch((err) => {
        console.error(err);
        return;
      });
  });

  exports.createNotificationOnComment = functions
  .region('europe-west1')
  .firestore.document('comments/{id}')
  .onCreate((snapshot) => {
    return db
      .doc(`/screams/${snapshot.data().screamId}`)
      .get()
      .then((doc) => {
        if (
          doc.exists &&
          doc.data().userHandle !== snapshot.data().userHandle
        ) {
          return db.doc(`/notifications/${snapshot.id}`).set({
            createdAt: new Date().toISOString(),
            recipient: doc.data().userHandle,
            sender: snapshot.data().userHandle,
            type: 'comment',
            read: false,
            screamId: doc.id
          });
        }
      })
      .catch((err) => {
        console.error(err);
        return;
      });
  });

---this code will make notification on like
---on unlike it will delete
---on comment the same
---added .region('europe-west1')
---4 functions are created in firebase console
---play around with routers->you know how toplay with it

---the code below will let us to show the notifications, likes and all in json
   format(added piece of code in users.js)

// Get own user details
exports.getAuthenticatedUser = (req, res) => {
  let userData = {};
  db.doc(`/users/${req.user.handle}`)
    .get()
    .then((doc) => {
      if (doc.exists) {
        userData.credentials = doc.data();
        return db
          .collection('likes')
          .where('userHandle', '==', req.user.handle)
          .get();
      }
    })
    .then((data) => {
      userData.likes = [];
      data.forEach((doc) => {
        userData.likes.push(doc.data());
      });
      return db
        .collection('notifications')
        .where('recipient', '==', req.user.handle)
        .limit(10)                                                *****.orderBy is not getting 
                                                                        created cox m 
                                                              nt getting link to create index
                                                              & m so tired too.
        .get();
    })
    .then((data) => {
      userData.notifications = [];
      data.forEach((doc) => {
        userData.notifications.push({
          recipient: doc.data().recipient,
          sender: doc.data().sender,
          createdAt: doc.data().createdAt,
          screamId: doc.data().screamId,
          type: doc.data().type,
          read: doc.data().read,
          notificationId: doc.id
        });
      });
      return res.json(userData);
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};

---changed code in users.js(piece added){also added route in index.js}


// Get any user's details
exports.getUserDetails = (req, res) => {
  let userData = {};
  db.doc(`/users/${req.params.handle}`)
    .get()
    .then((doc) => {
      if (doc.exists) {
        userData.user = doc.data();
        return db
          .collection('screams')
          .where('userHandle', '==', req.params.handle)              ****order by removed 
          .get();                                                  lateron will add
      } else {
        return res.status(404).json({ errror: 'User not found' });
      }
    })
    .then((data) => {
      userData.screams = [];
      data.forEach((doc) => {
        userData.screams.push({
          body: doc.data().body,
          createdAt: doc.data().createdAt,
          userHandle: doc.data().userHandle,
          userImage: doc.data().userImage,
          likeCount: doc.data().likeCount,
          commentCount: doc.data().commentCount,
          screamId: doc.id
        });
      });
      return res.json(userData);
    })
    .catch((err) => {
      console.error(err);
      return res.status(500).json({ error: err.code });
    });
};

---the above code will get any user details

---added route in index.js(markNotificationsRead->this will make us read the notification
   and make read: true from read: false)
---added route in user.js(piece of code)

 //markNotificationsRead

  exports.markNotificationsRead = (req, res) => {
    let batch = db.batch();
    req.body.forEach((notificationId) => {
      const notification = db.doc(`/notifications/${notificationId}`);
      batch.update(notification, { read: true });
    });
    batch
      .commit()
      .then(() => {
        return res.json({ message: 'Notifications marked read' });
      })
      .catch((err) => {
        console.error(err);
        return res.status(500).json({ error: err.code });
      });
  };

---process to check in insomnia(remember it kamayarubagayaru)

---code written to delete the screams(with scream, likes, notifications, comment
   all will be deleted at once){/scream/:screamId   -> particular scream deleted}
---added in index.js

---added code in index.js(added two database triggers)
---onuserimagechange added(when user image changes, scream image also changes )

const functions = require('firebase-functions');

const app = require('express')();

const FBAuth = require('./util/fbAuth');

const { db } = require('./util/admin');

const { 
    getAllScreams, 
    postOneScream,
    getScream,
    commentOnScream,
    likeScream,
    unlikeScream,
    deleteScream
} = require('./handlers/screams');

const { 
    signup, 
    login, 
    uploadImage, 
    addUserDetails, 
    getAuthenticatedUser,
    getUserDetails,
    markNotificationsRead
} = require('./handlers/users');




//scream routes
app.get('/screams', getAllScreams);
app.post('/scream', FBAuth, postOneScream);
app.get('/scream/:screamId', getScream);
app.post('/scream/:screamId/comment', FBAuth, commentOnScream);
app.get('/scream/:screamId/like', FBAuth, likeScream);
app.get('/scream/:screamId/unlike', FBAuth, unlikeScream);
app.delete('/scream/:screamId', FBAuth, deleteScream);

// app.get('/scream/:screamId', getImage);
// app.post('/scream/:screamId/image', FBAuth, imageOnScream);




//users routes
app.post('/signup', signup);
app.post('/login', login);
app.post('/user/image', FBAuth, uploadImage);
app.post('/user', FBAuth, addUserDetails);
app.get('/user', FBAuth, getAuthenticatedUser);
app.get('/user/:handle', getUserDetails);
app.post('/notifications', FBAuth, markNotificationsRead);


exports.api = functions.region('europe-west1').https.onRequest(app);

exports.createNotificationOnLike = functions
  .region('europe-west1')
  .firestore.document('likes/{id}')
  .onCreate((snapshot) => {
    return db
      .doc(`/screams/${snapshot.data().screamId}`)
      .get()
      .then((doc) => {
        if (
          doc.exists &&
          doc.data().userHandle !== snapshot.data().userHandle
        ) {
          return db.doc(`/notifications/${snapshot.id}`).set({
            createdAt: new Date().toISOString(),
            recipient: doc.data().userHandle,
            sender: snapshot.data().userHandle,
            type: 'like',
            read: false,
            screamId: doc.id
          });
        }
      })
      .catch((err) => console.error(err));
  });

  exports.deleteNotificationOnUnLike = functions
  .region('europe-west1')
  .firestore.document('likes/{id}')
  .onDelete((snapshot) => {
    return db
      .doc(`/notifications/${snapshot.id}`)
      .delete()
      .catch((err) => {
        console.error(err);
        return;
      });
  });

  exports.createNotificationOnComment = functions
  .region('europe-west1')
  .firestore.document('comments/{id}')
  .onCreate((snapshot) => {
    return db
      .doc(`/screams/${snapshot.data().screamId}`)
      .get()
      .then((doc) => {
        if (
          doc.exists &&
          doc.data().userHandle !== snapshot.data().userHandle
        ) {
          return db.doc(`/notifications/${snapshot.id}`).set({
            createdAt: new Date().toISOString(),
            recipient: doc.data().userHandle,
            sender: snapshot.data().userHandle,
            type: 'comment',
            read: false,
            screamId: doc.id
          });
        }
      })
      .catch((err) => {
        console.error(err);
        return;
      });
  });

  exports.onUserImageChange = functions
  .region('europe-west1')
  .firestore.document('/users/{userId}')
  .onUpdate((change) => {
    console.log(change.before.data());
    console.log(change.after.data());
    if (change.before.data().imageUrl !== change.after.data().imageUrl) {
      console.log('image has changed');
      const batch = db.batch();
      return db
        .collection('screams')
        .where('userHandle', '==', change.before.data().handle)
        .get()
        .then((data) => {
          data.forEach((doc) => {
            const scream = db.doc(`/screams/${doc.id}`);
            batch.update(scream, { userImage: change.after.data().imageUrl });
          });
          return batch.commit();
        });
    } else return true;
  });


  exports.onScreamDelete = functions
  .region('europe-west1')
  .firestore.document('/screams/{screamId}')
  .onDelete((snapshot, context) => {
    const screamId = context.params.screamId;
    const batch = db.batch();
    return db
      .collection('comments')
      .where('screamId', '==', screamId)
      .get()
      .then((data) => {
        data.forEach((doc) => {
          batch.delete(db.doc(`/comments/${doc.id}`));
        });
        return db
          .collection('likes')
          .where('screamId', '==', screamId)
          .get();
      })
      .then((data) => {
        data.forEach((doc) => {
          batch.delete(db.doc(`/likes/${doc.id}`));
        });
        return db
          .collection('notifications')
          .where('screamId', '==', screamId)
          .get();
      })
      .then((data) => {
        data.forEach((doc) => {
          batch.delete(db.doc(`/notifications/${doc.id}`));
        });
        return batch.commit();
      })
      .catch((err) => console.error(err));
  });

---changed the database rules coz it can be accessed through cloud firestore rest api
---this was before

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2020, 2, 21);
    }
  }
}

---after changing

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

************************************React*************************************

---deleted logo.svg in src
---deleted index.css in src
---deleted code in app.css
---added code in app.css

html,
body{
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
}

---modified code in index.js

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(<App />, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();

---modified code in app.js

import React from 'react';

import './App.css';

function App() {
  return (
    <div className="App">
      <h1>Our App</h1>
    </div>
  );
}

export default App;

---this way the usual react app is not shown
---and we get Our App displayed in browser

---now to change the icon and name of title that show in brower tab
---first go to public->delete the favicon image->paste the different image which you want->
   change the code in index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/luffy.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>practise</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

---now created folder in public, pages and components
---pages->home.js, signup.js, login.js

---added code in home.js

import React, { Component } from 'react'

class home extends Component {
    render() {
        return (
            <div>
                <h1>Home Page</h1>
            </div>
        )
    }
}

export default home;

---added code in login.js
                                                             *****rce to interact with
                                                                  you know what m talkin
import React, { Component } from 'react'

class Login extends Component {
    render() {
        return (
            <div>
                <h1>Login Page</h1>
            </div>
        )
    }
}

export default Login;

---added code in signup.js

import React, { Component } from 'react'

class signup extends Component {
    render() {
        return (
            <div>
                <h1>signup Page</h1>
            </div>
        )
    }
}

export default signup;

*npm install --save create-router-dom(in client-app)

---create navbar.js in components
*rce
---change code in app.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

import './App.css';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

class App extends Component {
  render() {
  return (
    <div className="App">
      <Router>
        <Switch>
          <Route exact path="/" component={home}/>
          <Route exact path="/login" component={login}/>
          <Route exact path="/signup" component={signup}/>
        </Switch>
      </Router>
    </div>
  );
}
}

export default App;

---so here we added the routes for hom, login, signup page
---and we can see it in browser displayd as Home Page as displayed in home.js under pages
---so at / we get home page
---at /login we get login page
---at /signup w get signup page

---so we want navigation bar to get these three, and not to type /login or /signup
*npm install --save @material-ui/core

---added code in navbar.js

import React, { Component } from 'react'

//MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';

class navbar extends Component {
    render() {
        return (
            <AppBar>
                <Toolbar>
                    <Button color="inherit">Login</Button>
                    <Button color="inherit">Home</Button>
                    <Button color="inherit">Signup</Button>
                </Toolbar>
            </AppBar>
        )
    }
}

export default navbar


---what we want is to keep the navbar on top fixed and only content of the page to change
---changed the code in app.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

import './App.css';

//Components
import Navbar from './components/Navbar';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

class App extends Component {
  render() {
  return (
    <div className="App">
      <Router>
        <Navbar/>
        <Switch>
          <Route exact path="/" component={home}/>
          <Route exact path="/login" component={login}/>
          <Route exact path="/signup" component={signup}/>
        </Switch>
      </Router>
    </div>
  );
}
}

export default App;

---& here we get the navbar containing login, signup, home 
---so the text got behind the navbar
---so let's make the text as container and will use bootstrap
---so added code in app.css

html,
body{
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
}
.container{
  margin: 80px auto 0 auto;
  max-width: 1200px;
}

---added code to app.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

import './App.css';

//Components
import Navbar from './components/Navbar';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

class App extends Component {
  render() {
  return (
    <div className="App">
      <Router>
      <Navbar/>
        <div className="container">          
          <Switch>
            <Route exact path="/" component={home}/>
            <Route exact path="/login" component={login}/>
            <Route exact path="/signup" component={signup}/>
          </Switch>
        </div>
      </Router>
    </div>
  );
}
}

export default App;

---this way we can see the text that got behinf the navbar

---now the buttons present in navbar does not give any text, so changed the code in
   navbar.js by which there is a link

import React, { Component } from 'react';
import Link from 'react-router-dom/Link';

//MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';

class navbar extends Component {
    render() {
        return (
            <AppBar>
                <Toolbar>
                    <Button color="inherit" component={Link} to="/login">Login</Button>
                    <Button color="inherit" component={Link} to="/">Home</Button>
                    <Button color="inherit" component={Link} to="/signup">Signup</Button>
                </Toolbar>
            </AppBar>
        )
    }
}

export default navbar

---so bringing login, signup, home to center
---added code in navbar.js

import React, { Component } from 'react';
import Link from 'react-router-dom/Link';

//MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';

class navbar extends Component {
    render() {
        return (
            <AppBar>
                <Toolbar className="nav-container">
                    <Button color="inherit" component={Link} to="/login">Login</Button>
                    <Button color="inherit" component={Link} to="/">Home</Button>
                    <Button color="inherit" component={Link} to="/signup">Signup</Button>
                </Toolbar>
            </AppBar>
        )
    }
}

export default navbar

---added code in app.css

html,
body{
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
}
.container{
  margin: 80px auto 0 auto;
  max-width: 1200px;
}
.nav-container{
  margin: auto;
}


******Scream Card Details******

---now to change the home page
---first changed the navbar theme 
---for that added code in app.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
//Components
import Navbar from './components/Navbar';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  }
});

class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <div className="App">
      <Router>
      <Navbar/>
        <div className="container">          
          <Switch>
            <Route exact path="/" component={home}/>
            <Route exact path="/login" component={login}/>
            <Route exact path="/signup" component={signup}/>
          </Switch>
        </div>
      </Router>
    </div>
    </MuiThemeProvider>
  );
}
}

export default App;

---now to change the theme of home page
---so used MuiThemeprovider(grid container)

import React, { Component } from 'react';

import Grid from '@material-ui/core/Grid';

class home extends Component {
    render() {
        return (
            <Grid container spacing={16}>
                <Grid item sm={8} xs={12}>
                    <p>Content...</p>
                </Grid>
                <Grid item sm={4} xs={12}>
                    <p>Profile...</p>
                </Grid>
            </Grid>
        );
    }
}

export default home;

---connecting to firebase backend
*npm install --save axios
---firebase console->copied the function api url
---updated the package.json->added proxy equal to the function api url created in firebase
---changed code in home.js so that frontend can take screams from backend

import React, { Component } from 'react';
import axios from 'axios';
import Grid from '@material-ui/core/Grid';

class home extends Component {
    state = {
        screams: null
    }
    componentDidMount() {
      axios.get('/screams')
        .then(res => {
            console.log(res.data)
            this.setState({
                screams: res.data
            })
        })
        .catch(err => console.log(err));
    }
    render() {
        let recentScreamsMarkUp = this.state.screams ? (
        this.state.screams.map(screams => <p>{screams.body}</p>)
        ) : <p>Loading...</p>
        return (
            <Grid container spacing={16}>
                <Grid item sm={8} xs={12}>
                    {recentScreamsMarkUp}
                </Grid>
                <Grid item sm={4} xs={12}>
                    <p>Profile...</p>
                </Grid>
            </Grid>
        );
    }
}

export default home;

---changed code in app.js(for backend to connect with frontend)

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
//Components
import Navbar from './components/Navbar';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariable: true
  }
});

class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <div className="App">
      <Router>
      <Navbar/>
        <div className="container">          
          <Switch>
            <Route exact path="/" component={home}/>
            <Route exact path="/login" component={login}/>
            <Route exact path="/signup" component={signup}/>
          </Switch>
        </div>
      </Router>
    </div>
    </MuiThemeProvider>
  );
}
}

export default App;

---so by this we can see the body in screams that we created in backend in frontend

---now to see the screams in card, we added code
---code in home.js

import React, { Component } from 'react';
import axios from 'axios';
import Grid from '@material-ui/core/Grid';

import Scream from '../components/Scream';

class home extends Component {
    state = {
        screams: []
    };
    componentDidMount() {
      axios.get('/screams')
        .then((res) => {
            console.log(res.data);
            this.setState({
                screams: res.data,
            });
        })
        .catch((err) => console.log(err));
    }
    render() {
       let recentScreamsMarkup = this.state.screams ? (
           this.state.screams.map((scream) => 
           <Scream key={scream.screamId}
           scream={scream}/>)
       ) : (
           <p>Loading...</p>
       )
        return (
            <Grid container spacing={16}>
                <Grid item sm={8} xs={12}>
                {recentScreamsMarkup}        ​
                </Grid>
                <Grid item sm={4} xs={12}>
                    <p>Profile...</p>
                </Grid>
            </Grid>
        );
    }
}

export default home;

---added code in scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';



const styles = {
    card: {
        display: 'flex',
        marginBottom: 20,
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover',
    }
};


class Scream extends Component {
    render() {
        // console.log(this.props.scream)
        const { 
            classes, 
            scream: {
                userImage,
                userHandle,
                body
            }
         } = this.props;

        // let classes = this.props.classes;

        // const scream = this.props.scream;
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                {/* <Typography
                variant="body2"
                color="textSecondary">
                    {createdAt}
                </Typography> */}

                </CardContent>
            </Card>
        );
    }

}

export default (withStyles(styles)(Scream));

---changing the createdAt with dayjs(we got relative time)
*npm install --save dayjs
---changed code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';



const styles = {
    card: {
        display: 'flex',
        marginBottom: 20,
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover',
    }
};


class Scream extends Component {
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const { 
            classes, 
            scream: {
                userImage,
                userHandle,
                body,
                createdAt
            }
         } = this.props;

        // let classes = this.props.classes;

        // const scream = this.props.scream;
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>

                </CardContent>
            </Card>
        );
    }

}

export default withStyles(styles)(Scream);

*******login page******

---now let's go to authentication page

---code changed in login.js(it will give me Yoooo in centre)

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';

//MUI stuff
import Grid from '@material-ui/core/Grid';

const styles = {
  form: {
      textAlign: 'center'
  }
};

class login extends Component {
    render() {
        const { classes } = this.props;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <p>Yooo</p>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

login.propTypes = {
    classes: PropTypes.object.isRequired
}

export default withStyles(styles)(login);

---next code added in login.js will bring luffy image and Login written

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import AppIcon from '../images/luffy.png';

//MUI stuff
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';

const styles = {
  form: {
      textAlign: 'center'
  }
};

class login extends Component {
    render() {
        const { classes } = this.props;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <img src={AppIcon} alt="luffy"/>
                    <Typography
                    variant="h1"
                    className={classes.pageTitle}>
                        Login
                    </Typography>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

login.propTypes = {
    classes: PropTypes.object.isRequired
}

export default withStyles(styles)(login);

---this code added in login.js does many things(circular progress, loading, submit,
   if empty kept shows it's empty, if wrong shows wrong credentials)

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import AppIcon from '../images/luffy_icon.png';
import axios from 'axios';
import { Link } from 'react-router-dom';


//MUI stuff
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import CircularProgress from '@material-ui/core/CircularProgress';

const styles = {
  form: {
      textAlign: 'center'
  },
  image: {
      margin: '20px auto 20px auto'
  },
  pageTitle: {
      margin: '10px auto 10px auto'
  },
  textField: {
      margin: '10px auto 10px auto'
  },
  button: {
      marginTop: 30,
      position: 'relative'
  },
  customError: {
      color: 'red',
      fontSize: '0.8rem',
      marginTop: 10
  },
  progress: {
      position: 'absolute'
  }
};



class login extends Component {
    constructor(){
        super();
        this.state = {
            email: '',
            password: '',
            loading: false,
            errors: {}
        }
    }
    handleSubmit = (event) => {
        event.preventDefault();
        this.setState({
            loading: true
        });
        const userData = {
            email: this.state.email,
            password: this.state.password
        }
        axios.post('/login', userData)
        .then(res => {
           console.log(res.data);
           localStorage.setItem('FBIdToken', `Bearer ${res.data.token}`);   
           this.setState({
               loading: false
           });
           this.props.history.push('/');     
        })
        .catch(err => {
            this.setState({
                errors: err.response.data,
                loading: false
            })
        })
    };
    handleChange = (event) => {
        this.setState({
            [event.target.name]: event.target.value
        });
    };
    render() {
        const { classes } = this.props;
        const { errors, loading } = this.state;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <img 
                    src={AppIcon} 
                    alt="luffy" 
                    className={classes.image}/>
                    <Typography
                    variant="h2"
                    className={classes.pageTitle}>
                        Login
                    </Typography>
                    <form 
                    noValidate 
                    onSubmit={this.handleSubmit}>
                      <TextField 
                      id="email" 
                      name="email" 
                      type="email" 
                      label="Email" 
                      className={classes.textField}
                      helperText={errors.email} 
                      error={errors.email ? true : false} 
                      value={this.state.email} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="password" 
                      name="password" 
                      type="password" 
                      label="Password" 
                      className={classes.textField}
                      helperText={errors.password} 
                      error={errors.password ? true : false} 
                      value={this.state.password} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      {errors.general && (
                          <Typography 
                          variant="body2"
                          className={classes.customError}>
                            {errors.general}
                          </Typography>
                      )}
                      <Button 
                      type="submit" 
                      variant="contained" 
                      color="primary" 
                      className={classes.button}
                      disabled={loading}>
                          LOGIN
                          {loading && (
                <CircularProgress size={30} className={classes.progress} />
              )}
                      </Button>
                      <br />
                      <small>
                      dont have an account ? sign up <Link to="/signup">here</Link>
                      </small>
                    </form>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

login.propTypes = {
    classes: PropTypes.object.isRequired
}

export default withStyles(styles)(login);

******signup an auth state******
   
---copied the login.js and pasted it in signup.js
---changed code in signup.js(we also have local storage token stored)

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import AppIcon from '../images/luffy_icon.png';
import axios from 'axios';
import { Link } from 'react-router-dom';


//MUI stuff
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import CircularProgress from '@material-ui/core/CircularProgress';

const styles = {
  form: {
      textAlign: 'center'
  },
  image: {
      margin: '20px auto 20px auto'
  },
  pageTitle: {
      margin: '10px auto 10px auto'
  },
  textField: {
      margin: '10px auto 10px auto'
  },
  button: {
      marginTop: 30,
      position: 'relative'
  },
  customError: {
      color: 'red',
      fontSize: '0.8rem',
      marginTop: 10
  },
  progress: {
      position: 'absolute'
  }
};



class signup extends Component {
    constructor(){
        super();
        this.state = {
            email: '',
            password: '',
            confirmPassword: '',
            handle: '',
            loading: false,
            errors: {}
        }
    }
    handleSubmit = (event) => {
        event.preventDefault();
        this.setState({
            loading: true
        });
        const newUserData = {
            email: this.state.email,
            password: this.state.password,
            confirmPassword: this.state.confirmPassword,
            handle: this.state.handle
        }
        axios.post('/signup', newUserData)
        .then(res => {
           console.log(res.data);
           localStorage.setItem('FBIdToken', `Bearer ${res.data.token}`);   
           this.setState({
               loading: false
           });
           this.props.history.push('/');     
        })
        .catch(err => {
            this.setState({
                errors: err.response.data,
                loading: false
            })
        })
    };
    handleChange = (event) => {
        this.setState({
            [event.target.name]: event.target.value
        });
    };
    render() {
        const { classes } = this.props;
        const { errors, loading } = this.state;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <img 
                    src={AppIcon} 
                    alt="luffy" 
                    className={classes.image}/>
                    <Typography
                    variant="h2"
                    className={classes.pageTitle}>
                        Signup
                    </Typography>
                    <form 
                    noValidate 
                    onSubmit={this.handleSubmit}>
                      <TextField 
                      id="email" 
                      name="email" 
                      type="email" 
                      label="Email" 
                      className={classes.textField}
                      helperText={errors.email} 
                      error={errors.email ? true : false} 
                      value={this.state.email} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="password" 
                      name="password" 
                      type="password" 
                      label="Password" 
                      className={classes.textField}
                      helperText={errors.password} 
                      error={errors.password ? true : false} 
                      value={this.state.password} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="confirmPassword" 
                      name="confirmPassword" 
                      type="confirmPassword" 
                      label="Confirm Password" 
                      className={classes.textField}
                      helperText={errors.confirmPassword} 
                      error={errors.confirmPassword ? true : false} 
                      value={this.state.confirmPassword} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="handle" 
                      name="handle" 
                      type="text" 
                      label="Handle" 
                      className={classes.textField}
                      helperText={errors.handle} 
                      error={errors.handle ? true : false} 
                      value={this.state.handle} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      {errors.general && (
                          <Typography 
                          variant="body2"
                          className={classes.customError}>
                            {errors.general}
                          </Typography>
                      )}
                      <Button 
                      type="submit" 
                      variant="contained" 
                      color="primary" 
                      className={classes.button}
                      disabled={loading}>
                          SIGNUP
                          {loading && (
                <CircularProgress size={30} className={classes.progress} />
              )}
                      </Button>
                      <br />
                      <small>
                      Already have an account ? login <Link to="/login">here</Link>
                      </small>
                    </form>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

signup.propTypes = {
    classes: PropTypes.object.isRequired
}

export default withStyles(styles)(signup);

---but with this code, if we signup to the page, we cna also go to the 
   loginpage or signuppage)
---for token to give some expiry time, we change the code in app.js
   and install library called jwt-decode or json web token decoder
*npm install --save jwt-decode
---changed code in App.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import jwtDecode from 'jwt-decode';

//Components
import Navbar from './components/Navbar';
import AuthRoute from './util/AuthRoute';



//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariants: true
  },
  form: {
    textAlign: 'center'
},
image: {
    margin: '20px auto 20px auto'
},
pageTitle: {
    margin: '10px auto 10px auto'
},
textField: {
    margin: '10px auto 10px auto'
},
button: {
    marginTop: 30,
    position: 'relative'
},
customError: {
    color: 'red',
    fontSize: '0.8rem',
    marginTop: 10
},
progress: {
    position: 'absolute'
}
});

let authenticated;
const token = localStorage.FBIdToken;
if (token) {
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp * 1000 < Date.now()) {
    window.location.href = '/login';
    authenticated=false;
  } else {
    authenticated=true;
  }
}

class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <div className="App">
        <Router>
          <Navbar/>
            <div className="container">          
              <Switch>
                <Route exact path="/" component={home}/>
                <AuthRoute exact path="/login" component={login} authenticated={authenticated}/>
                <AuthRoute exact path="/signup" component={signup} authenticated={authenticated}/>
              </Switch>
             </div>
         </Router>
       </div>
     </MuiThemeProvider>
   );
  }
 }

export default App;

---made AuthRoute.js file in util folder(code written)

import React from 'react';
import { Route, Redirect } from 'react-router-dom';
// import { connect } from 'react-redux';
// import PropTypes from 'prop-types';

const AuthRoute = ({ component: Component, authenticated, ...rest }) => (
  <Route
    {...rest}
    render={(props) =>
      authenticated === true ? <Redirect to="/" /> : <Component {...props} />
    }
  />
);

// const mapStateToProps = (state) => ({
//   authenticated: state.user.authenticated
// });

// AuthRoute.propTypes = {
//   user: PropTypes.object
// };

export default AuthRoute;

---this both changes will let us be on same homepage untill the token expires
   which has certain limited time

*******Redux Setup********

*npm install --save redux react-redux redux-thunk
---react-redux is a library that acts as a middleman between react and redux
   redux-thunk is like a middleware that helps in asynchronous coding
---created redux folder in src
---in redux folder added actions, reducers folder and types.js, store.js file
---in reducers folder created dataReducer.js, uiReducer.js, userReducer.js
---added code in store.js

import { createStore, combineReducers, applyMiddleware, compose } from 'redux';
import thunk from 'redux-thunk';

import userReducer from './reducers/userReducer';
import dataReducer from './reducers/dataReducer';
import uiReducer from './reducers/uiReducer';

const initialState = {};

const middleware = [thunk];

const reducers = combineReducers({
  user: userReducer,
  data: dataReducer,
  UI: uiReducer
});

// const composeEnhancers =
//   typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
//     ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})
//     : compose;

// const enhancer = composeEnhancers(applyMiddleware(...middleware));
const store = createStore(
    reducers, 
    initialState,
    compose(
        applyMiddleware(...middleware),
        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
    ));

export default store;

---added code in app.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import jwtDecode from 'jwt-decode';

//Components
import Navbar from './components/Navbar';
import AuthRoute from './util/AuthRoute';

//REDUX
import { Provider } from 'react-redux';
import store from './redux/store';
// import { SET_AUTHENTICATED } from './redux/types';
// import { logoutUser, getUserData } from './redux/actions/userActions';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariants: true
  },
  form: {
    textAlign: 'center'
},
image: {
    margin: '20px auto 20px auto'
},
pageTitle: {
    margin: '10px auto 10px auto'
},
textField: {
    margin: '10px auto 10px auto'
},
button: {
    marginTop: 30,
    position: 'relative'
},
customError: {
    color: 'red',
    fontSize: '0.8rem',
    marginTop: 10
},
progress: {
    position: 'absolute'
}
});

let authenticated;
const token = localStorage.FBIdToken;
if (token) {
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp * 1000 < Date.now()) {
    window.location.href = '/login';
    authenticated=false;
  } else {
    authenticated=true;
  }
}

class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <Provider store={store}>
        <Router>
          <Navbar/>
            <div className="container">          
              <Switch>
                <Route 
                exact path="/" 
                component={home}/>
                <AuthRoute 
                exact path="/login" 
                component={login} 
                authenticated={authenticated}/>
                <AuthRoute 
                exact path="/signup" 
                component={signup} 
                authenticated={authenticated}/>
              </Switch>
             </div>
         </Router>
       </Provider>
     </MuiThemeProvider>
   );
  }
 }

export default App;

---added code in types.js in redux

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
// export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
// export const LOADING_DATA = 'LOADING_DATA';
// export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// // Data reducer types
// export const SET_SCREAMS = 'SET_SCREAMS';
// export const SET_SCREAM = 'SET_SCREAM';
// export const LIKE_SCREAM = 'LIKE_SCREAM';
// export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
// export const DELETE_SCREAM = 'DELETE_SCREAM';
// export const POST_SCREAM = 'POST_SCREAM';
// export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in userActions.js(move the code from login and signup to userActions)

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    // SET_UNAUTHENTICATED,
    // LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        const FBIdToken = `Bearer ${res.data.token}`;
        localStorage.setItem('FBIdToken', FBIdToken);
        axios.defaults.headers.common['Authorization'] = FBIdToken;
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const getUserData = () => (dispatch) => {
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

---added code in userReducer.js

import {
    SET_USER,
    // SET_ERRORS,
    // CLEAR_ERRORS,
    // LOADING_UI,
    SET_AUTHENTICATED,
    SET_UNAUTHENTICATED,
    // LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';
  
  const initialState = {
    authenticated: false,
    // loading: false,
    credentials: {},
    likes: [],
    notifications: []
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_AUTHENTICATED:
        return {
          ...state,
          authenticated: true
        };
        case SET_UNAUTHENTICATED:
            return initialState;
          case SET_USER:
            return {
              authenticated: true,
            //   loading: false,
              ...action.payload
            };
            default:
                return state;
            }
          }

---added code in uiReducer.js

import {
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI
  } from '../types';

  const initialState = {
    loading: false,
    errors: null
  };
  
  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_ERRORS:
        return {
          ...state,
          loading: false,
          errors: action.payload
        };
        case CLEAR_ERRORS:
            return {
              ...state,
              loading: false,
              errors: null
            };
            case LOADING_UI:
                return {
                  ...state,
                  loading: true
                };
        default:
            return state;
        }
      }

---added code in login.js

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import AppIcon from '../images/luffy_icon.png';
import { Link } from 'react-router-dom';


//MUI stuff
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import CircularProgress from '@material-ui/core/CircularProgress';

//REDUX stuff
import { connect } from 'react-redux';
import { loginUser } from '../redux/actions/userActions';


const styles = {
  form: {
      textAlign: 'center'
  },
  image: {
      margin: '20px auto 20px auto'
  },
  pageTitle: {
      margin: '10px auto 10px auto'
  },
  textField: {
      margin: '10px auto 10px auto'
  },
  button: {
      marginTop: 30,
      position: 'relative'
  },
  customError: {
      color: 'red',
      fontSize: '0.8rem',
      marginTop: 10
  },
  progress: {
      position: 'absolute'
  }
};



class login extends Component {
    constructor(){
        super();
        this.state = {
            email: '',
            password: '',
            errors: {}
        };
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.UI.errors) {
          this.setState({ errors: nextProps.UI.errors });
        }
      }
    handleSubmit = (event) => {
        event.preventDefault();
        const userData = {
            email: this.state.email,
            password: this.state.password
        };
        this.props.loginUser(userData, this.props.history);
    };
    handleChange = (event) => {
        this.setState({
            [event.target.name]: event.target.value
        });
    };
    render() {
        const {
            classes,
            UI: { loading }
          } = this.props;
        const { errors } = this.state;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <img 
                    src={AppIcon} 
                    alt="luffy" 
                    className={classes.image}/>
                    <Typography
                    variant="h2"
                    className={classes.pageTitle}>
                        Login
                    </Typography>
                    <form 
                    noValidate 
                    onSubmit={this.handleSubmit}>
                      <TextField 
                      id="email" 
                      name="email" 
                      type="email" 
                      label="Email" 
                      className={classes.textField}
                      helperText={errors.email} 
                      error={errors.email ? true : false} 
                      value={this.state.email} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="password" 
                      name="password" 
                      type="password" 
                      label="Password" 
                      className={classes.textField}
                      helperText={errors.password} 
                      error={errors.password ? true : false} 
                      value={this.state.password} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      {errors.general && (
                          <Typography 
                          variant="body2"
                          className={classes.customError}>
                            {errors.general}
                          </Typography>
                      )}
                      <Button 
                      type="submit" 
                      variant="contained" 
                      color="primary" 
                      className={classes.button}
                      disabled={loading}>
                          LOGIN
                          {loading && (
                <CircularProgress size={30} className={classes.progress} />
              )}
                      </Button>
                      <br />
                      <small>
                      dont have an account ? sign up <Link to="/signup">here</Link>
                      </small>
                    </form>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

login.propTypes = {
    classes: PropTypes.object.isRequired,
    loginUser: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };

const mapStateToProps = (state) => ({
    user: state.user,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    loginUser
  };
  

export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(login));


********Signup and Auth Route*********

---changed code in userActions.js

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_UNAUTHENTICATED,
    // LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const signupUser = (newUserData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/signup', newUserData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const logoutUser = () => (dispatch) => {
    localStorage.removeItem('FBIdToken');
    delete axios.defaults.headers.common['Authorization'];
    dispatch({ type: SET_UNAUTHENTICATED });
  };

  export const getUserData = () => (dispatch) => {
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  const setAuthorizationHeader = (token) => {
    const FBIdToken = `Bearer ${token}`;
    localStorage.setItem('FBIdToken', FBIdToken);
    axios.defaults.headers.common['Authorization'] = FBIdToken;
  };

---changed code in signup.js

import React, { Component } from 'react'
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import AppIcon from '../images/luffy_icon.png';
import { Link } from 'react-router-dom';


//MUI stuff
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import CircularProgress from '@material-ui/core/CircularProgress';

//REDUX stuff
import { connect } from 'react-redux';
import { signupUser } from '../redux/actions/userActions';

const styles = {
  form: {
      textAlign: 'center'
  },
  image: {
      margin: '20px auto 20px auto'
  },
  pageTitle: {
      margin: '10px auto 10px auto'
  },
  textField: {
      margin: '10px auto 10px auto'
  },
  button: {
      marginTop: 30,
      position: 'relative'
  },
  customError: {
      color: 'red',
      fontSize: '0.8rem',
      marginTop: 10
  },
  progress: {
      position: 'absolute'
  }
};



class signup extends Component {
    constructor(){
        super();
        this.state = {
            email: '',
            password: '',
            confirmPassword: '',
            handle: '',
            errors: {}
        };
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.UI.errors) {
          this.setState({ errors: nextProps.UI.errors });
        }
      }
    handleSubmit = (event) => {
        event.preventDefault();
        this.setState({
            loading: true
        });
        const newUserData = {
            email: this.state.email,
            password: this.state.password,
            confirmPassword: this.state.confirmPassword,
            handle: this.state.handle
        };
        this.props.signupUser(newUserData, this.props.history);
    };
    handleChange = (event) => {
        this.setState({
            [event.target.name]: event.target.value
        });
    };
    render() {
        const {
            classes,
            UI: { loading }
          } = this.props;
        const { errors } = this.state;
        return (
            <Grid container className={classes.form}>
                <Grid item sm/>
                <Grid item sm>
                    <img 
                    src={AppIcon} 
                    alt="luffy" 
                    className={classes.image}/>
                    <Typography
                    variant="h2"
                    className={classes.pageTitle}>
                        Signup
                    </Typography>
                    <form 
                    noValidate 
                    onSubmit={this.handleSubmit}>
                      <TextField 
                      id="email" 
                      name="email" 
                      type="email" 
                      label="Email" 
                      className={classes.textField}
                      helperText={errors.email} 
                      error={errors.email ? true : false} 
                      value={this.state.email} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="password" 
                      name="password" 
                      type="password" 
                      label="Password" 
                      className={classes.textField}
                      helperText={errors.password} 
                      error={errors.password ? true : false} 
                      value={this.state.password} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="confirmPassword" 
                      name="confirmPassword" 
                      type="confirmPassword" 
                      label="Confirm Password" 
                      className={classes.textField}
                      helperText={errors.confirmPassword} 
                      error={errors.confirmPassword ? true : false} 
                      value={this.state.confirmPassword} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      <TextField 
                      id="handle" 
                      name="handle" 
                      type="text" 
                      label="Handle" 
                      className={classes.textField}
                      helperText={errors.handle} 
                      error={errors.handle ? true : false} 
                      value={this.state.handle} 
                      onChange={this.handleChange} 
                      fullWidth/>
                      {errors.general && (
                          <Typography 
                          variant="body2"
                          className={classes.customError}>
                            {errors.general}
                          </Typography>
                      )}
                      <Button 
                      type="submit" 
                      variant="contained" 
                      color="primary" 
                      className={classes.button}
                      disabled={loading}>
                          SIGNUP
                          {loading && (
                <CircularProgress size={30} className={classes.progress} />
              )}
                      </Button>
                      <br />
                      <small>
                      Already have an account ? login <Link to="/login">here</Link>
                      </small>
                    </form>
                </Grid>
                <Grid item sm/>
            </Grid>
        )
    }
}

signup.propTypes = {
    classes: PropTypes.object.isRequired,
    user: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired,
    signupUser: PropTypes.func.isRequired
  };
  

const mapStateToProps = (state) => ({
    user: state.user,
    UI: state.UI
  });

  export default connect(
    mapStateToProps,
    { signupUser }
  )(withStyles(styles)(signup));

---changed code in App.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import jwtDecode from 'jwt-decode';

//Components
import Navbar from './components/Navbar';
import AuthRoute from './util/AuthRoute';

// Redux
import { Provider } from 'react-redux';
import store from './redux/store';
import { SET_AUTHENTICATED } from './redux/types';
import { logoutUser, getUserData } from './redux/actions/userActions';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariants: true
  },
  form: {
    textAlign: 'center'
},
image: {
    margin: '20px auto 20px auto'
},
pageTitle: {
    margin: '10px auto 10px auto'
},
textField: {
    margin: '10px auto 10px auto'
},
button: {
    marginTop: 30,
    position: 'relative'
},
customError: {
    color: 'red',
    fontSize: '0.8rem',
    marginTop: 10
},
progress: {
    position: 'absolute'
}
});

const token = localStorage.FBIdToken;
if (token) {
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp * 1000 < Date.now()) {
    store.dispatch(logoutUser());
    window.location.href = '/login';
  } else {
    store.dispatch({ type: SET_AUTHENTICATED });
    axios.defaults.headers.common['Authorization'] = token;
    store.dispatch(getUserData());
  }
}


class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <Provider store={store}>
        <Router>
          <Navbar/>
            <div className="container">          
              <Switch>
                <Route 
                exact path="/" 
                component={home}/>
                <AuthRoute 
                exact path="/login" 
                component={login} 
                />
                <AuthRoute 
                exact path="/signup" 
                component={signup} 
                />
              </Switch>
             </div>
         </Router>
       </Provider>
     </MuiThemeProvider>
   );
  }
 }

export default App;

---changed code in AuthRoute.js

import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

const AuthRoute = ({ component: Component, authenticated, ...rest }) => (
  <Route
    {...rest}
    render={(props) =>
      authenticated === true ? <Redirect to="/" /> : <Component {...props} />
    }
  />
);

const mapStateToProps = (state) => ({
  authenticated: state.user.authenticated
});

AuthRoute.propTypes = {
  user: PropTypes.object.isRequired
};

export default connect(mapStateToProps)(AuthRoute);

********Profile Section*********

---created Profile.js file in components folder
*npm install --save @material-ui/icons

---changed code in userReducer.js

import {
    SET_USER,
    // SET_ERRORS,
    // CLEAR_ERRORS,
    // LOADING_UI,
    SET_AUTHENTICATED,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';
  
  const initialState = {
    authenticated: false,
    loading: false,
    credentials: {},
    likes: [],
    notifications: []
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_AUTHENTICATED:
        return {
          ...state,
          authenticated: true
        };
        case SET_UNAUTHENTICATED:
            return initialState;
          case SET_USER:
            return {
              authenticated: true,
              loading: false,
              ...action.payload
            };
            case LOADING_USER:
              return {
                ...state,
                loading: true
              };
            default:
                return state;
            }
          }


---changed code in userActions.js

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const signupUser = (newUserData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/signup', newUserData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const logoutUser = () => (dispatch) => {
    localStorage.removeItem('FBIdToken');
    delete axios.defaults.headers.common['Authorization'];
    dispatch({ type: SET_UNAUTHENTICATED });
  };

  export const getUserData = () => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  const setAuthorizationHeader = (token) => {
    const FBIdToken = `Bearer ${token}`;
    localStorage.setItem('FBIdToken', FBIdToken);
    axios.defaults.headers.common['Authorization'] = FBIdToken;
  };


---changed code in home.js

import React, { Component } from 'react';
import axios from 'axios';
import Grid from '@material-ui/core/Grid';

import Scream from '../components/Scream';
import Profile from '../components/Profile';

class home extends Component {
    state = {
        screams: []
    };
    componentDidMount() {
      axios.get('/screams')
        .then((res) => {
            
            this.setState({
                screams: res.data,
            });
        })
        .catch((err) => console.log(err));
    }
    render() {
       let recentScreamsMarkup = this.state.screams ? (
           this.state.screams.map((scream) => 
           <Scream key={scream.screamId}
           scream={scream}/>)
       ) : (
           <p>Loading...</p>
       )
        return (
            <Grid container spacing={16}>
                <Grid item sm={8} xs={12}>
                {recentScreamsMarkup}        ​
                </Grid>
                <Grid item sm={4} xs={12}>
                <Profile />
                </Grid>
            </Grid>
        );
    }
}

export default home;


---changed code in Profile.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';

// MUI stuff
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';

//Redux stuff
import { connect } from 'react-redux';

//Icons
import LocationOn from '@material-ui/icons/LocationOn';
import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';
// import EditIcon from '@material-ui/icons/Edit';
// import KeyboardReturn from '@material-ui/icons/KeyboardReturn';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative',
          '& button': {
            position: 'absolute',
            top: '80%',
            left: '70%'
          }
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        },
        '& svg.button': {
          '&:hover': {
            cursor: 'pointer'
          }
        }
      },
      buttons: {
        textAlign: 'center',
        '& a': {
          margin: '20px 10px'
        }
      }
};

class Profile extends Component {
    render() {
        const {
            classes,
            user: {
              credentials: { handle, createdAt, imageUrl, location },
              loading,
              authenticated
            }
          } = this.props;

          let profileMarkup = !loading ? (
            authenticated ? (
              <Paper className={classes.paper}>
                <div className={classes.profile}>
                  <div className="image-wrapper">
                    <img src={imageUrl} alt="profile" className="profile-image" />
                  </div>
                    <hr/>
                    <div className="profile-details">
               <MuiLink component={Link} to={`/users/${handle}`}
               color="primary"
               variant="h5">
                   {handle}
               </MuiLink>
               <hr/>
               {location && (
                   <Fragment>
                       <locationOn color="primary"/> 
                   <span>
                       {location}
                   </span>
                   <hr/>
                   </Fragment>
               )}
                <CalendarToday color="primary" />{' '}
              <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
                    </div>
                </div>
              </Paper>
            ) : (
                <Paper className={classes.paper}>
                    <Typography variant="body2" align="center">
                        No profile found,please login again
                    </Typography>
                    <div className={classes.buttons}>
                       <Button variant="contained" color="primary" component={Link} to="/login">
                           Login
                       </Button>
                       <Button variant="contained" color="secondary" component={Link} to="/signup">
                           Signup
                       </Button>
                    </div>
                </Paper>
            )) : (<p>loading...</p>)
                    
                    
        return profileMarkup;
    }
}

const mapStateToProps = (state) => ({
    user: state.user
  });
  
  Profile.propTypes = {
    // logoutUser: PropTypes.func.isRequired,
    // uploadImage: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
export default connect(
    mapStateToProps
  )(withStyles(styles)(Profile));


*******Image Upload********

---changed code in userActions.js

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const signupUser = (newUserData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/signup', newUserData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const logoutUser = () => (dispatch) => {
    localStorage.removeItem('FBIdToken');
    delete axios.defaults.headers.common['Authorization'];
    dispatch({ type: SET_UNAUTHENTICATED });
  };

  export const getUserData = () => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  export const uploadImage = (formData) => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .post('/user/image', formData)
      .then(() => {
        dispatch(getUserData());
      })
      .catch((err) => console.log(err));
  };

  const setAuthorizationHeader = (token) => {
    const FBIdToken = `Bearer ${token}`;
    localStorage.setItem('FBIdToken', FBIdToken);
    axios.defaults.headers.common['Authorization'] = FBIdToken;
  };

---changed code in Profile.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';

// MUI stuff
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';

//Redux stuff
import { connect } from 'react-redux';
import { logoutUser, uploadImage } from '../redux/actions/userActions';

//Icons
import LocationOn from '@material-ui/icons/LocationOn';
import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';
import EditIcon from '@material-ui/icons/Edit';
// import KeyboardReturn from '@material-ui/icons/KeyboardReturn';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative',
          '& button': {
            position: 'absolute',
            top: '80%',
            left: '70%'
          }
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        },
        '& svg.button': {
          '&:hover': {
            cursor: 'pointer'
          }
        }
      },
      buttons: {
        textAlign: 'center',
        '& a': {
          margin: '20px 10px'
        }
      }
};

class Profile extends Component {
    handleImageChange = (event) => {
        const image = event.target.files[0];
        const formData = new FormData();
        formData.append('image', image, image.name);
        this.props.uploadImage(formData);
      };
      handleEditPicture = () => {
        const fileInput = document.getElementById('imageInput');
        fileInput.click();
      };
    render() {
        const {
            classes,
            user: {
              credentials: { handle, createdAt, imageUrl, location },
              loading,
              authenticated
            }
          } = this.props;

          let profileMarkup = !loading ? (
            authenticated ? (
              <Paper className={classes.paper}>
                <div className={classes.profile}>
                  <div className="image-wrapper">
                    <img src={imageUrl} alt="profile" className="profile-image" />
                    <input
                type="file"
                id="imageInput"
                hidden="hidden"
                onChange={this.handleImageChange}
              />
              <Tooltip title="Edit profile picture"
              placement="top">
              <IconButton
                // tip="Edit profile picture"
                onClick={this.handleEditPicture}
                className="button"
              >
                <EditIcon color="primary" />
              </IconButton>
              </Tooltip>
                  </div>
                    <hr/>
                    <div className="profile-details">
               <MuiLink component={Link} to={`/users/${handle}`}
               color="primary"
               variant="h5">
                   {handle}
               </MuiLink>
               <hr/>
               {location && (
                   <Fragment>
                       <locationOn color="primary"/> 
                   <span>
                       {location}
                   </span>
                   <hr/>
                   </Fragment>
               )}
                <CalendarToday color="primary" />{' '}
              <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
                    </div>
                </div>
              </Paper>
            ) : (
                <Paper className={classes.paper}>
                    <Typography variant="body2" align="center">
                        No profile found,please login again
                    </Typography>
                    <div className={classes.buttons}>
                       <Button variant="contained" color="primary" component={Link} to="/login">
                           Login
                       </Button>
                       <Button variant="contained" color="secondary" component={Link} to="/signup">
                           Signup
                       </Button>
                    </div>
                </Paper>
            )) : (<p>loading...</p>)
                    
                    
        return profileMarkup;
    }
}

const mapStateToProps = (state) => ({
    user: state.user
  });

const mapActionsToProps = { logoutUser, uploadImage };

  
  Profile.propTypes = {
    logoutUser: PropTypes.func.isRequired,
    uploadImage: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(Profile));


*******LogOut and Edit Profile********

---added code in Profile.js(this will bring logout icon in profile section)

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';

// MUI stuff
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';

//Redux stuff
import { connect } from 'react-redux';
import { logoutUser, uploadImage } from '../redux/actions/userActions';

//Icons
import LocationOn from '@material-ui/icons/LocationOn';
import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';
import EditIcon from '@material-ui/icons/Edit';
import KeyboardReturn from '@material-ui/icons/KeyboardReturn';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative',
          '& button': {
            position: 'absolute',
            top: '80%',
            left: '70%'
          }
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        },
        '& svg.button': {
          '&:hover': {
            cursor: 'pointer'
          }
        }
      },
      buttons: {
        textAlign: 'center',
        '& a': {
          margin: '20px 10px'
        }
      }
};

class Profile extends Component {
    handleImageChange = (event) => {
        const image = event.target.files[0];
        const formData = new FormData();
        formData.append('image', image, image.name);
        this.props.uploadImage(formData);
      };
      handleEditPicture = () => {
        const fileInput = document.getElementById('imageInput');
        fileInput.click();
      };
      handleLogout = () => {
        this.props.logoutUser();
      };
    render() {
        const {
            classes,
            user: {
              credentials: { handle, createdAt, imageUrl, location },
              loading,
              authenticated
            }
          } = this.props;

          let profileMarkup = !loading ? (
            authenticated ? (
              <Paper className={classes.paper}>
                <div className={classes.profile}>
                  <div className="image-wrapper">
                    <img src={imageUrl} alt="profile" className="profile-image" />
                    <input
                type="file"
                id="imageInput"
                hidden="hidden"
                onChange={this.handleImageChange}
              />
              <Tooltip title="Edit profile picture"
              placement="top">
              <IconButton
                // tip="Edit profile picture"
                onClick={this.handleEditPicture}
                className="button"
              >
                <EditIcon color="primary" />
              </IconButton>
              </Tooltip>
                  </div>
                    <hr/>
                    <div className="profile-details">
               <MuiLink component={Link} to={`/users/${handle}`}
               color="primary"
               variant="h5">
                   {handle}
               </MuiLink>
               <hr/>
               {location && (
                   <Fragment>
                       <locationOn color="primary"/> 
                   <span>
                       {location}
                   </span>
                   <hr/>
                   </Fragment>
               )}
                <CalendarToday color="primary" />{' '}
              <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
                    </div>
                    <Tooltip title="Logout"
                    placement="top">
                        <IconButton
                        onClick={this.handleLogout}>
                            <KeyboardReturn color="primary"/>
                        </IconButton>
                    </Tooltip>
                </div>
              </Paper>
            ) : (
                <Paper className={classes.paper}>
                    <Typography variant="body2" align="center">
                        No profile found,please login again
                    </Typography>
                    <div className={classes.buttons}>
                       <Button variant="contained" color="primary" component={Link} to="/login">
                           Login
                       </Button>
                       <Button variant="contained" color="secondary" component={Link} to="/signup">
                           Signup
                       </Button>
                    </div>
                </Paper>
            )) : (<p>loading...</p>)
                    
                    
        return profileMarkup;
    }
}

const mapStateToProps = (state) => ({
    user: state.user
  });

const mapActionsToProps = { logoutUser, uploadImage };

  
  Profile.propTypes = {
    logoutUser: PropTypes.func.isRequired,
    uploadImage: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(Profile));

---created EditDetails.js file in components folder
---changed code in userActions.js

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    // MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const signupUser = (newUserData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/signup', newUserData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const logoutUser = () => (dispatch) => {
    localStorage.removeItem('FBIdToken');
    delete axios.defaults.headers.common['Authorization'];
    dispatch({ type: SET_UNAUTHENTICATED });
  };

  export const getUserData = () => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  export const uploadImage = (formData) => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .post('/user/image', formData)
      .then(() => {
        dispatch(getUserData());
      })
      .catch((err) => console.log(err));
  };

  export const editUserDetails = (userDetails) => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .post('/user', userDetails)
      .then(() => {
        dispatch(getUserData());
      })
      .catch((err) => console.log(err));
  };

  const setAuthorizationHeader = (token) => {
    const FBIdToken = `Bearer ${token}`;
    localStorage.setItem('FBIdToken', FBIdToken);
    axios.defaults.headers.common['Authorization'] = FBIdToken;
  };

---written code in EditDetails.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
// import MyButton from '../../util/MyButton';
// Redux stuff
import { connect } from 'react-redux';
import { editUserDetails } from '../redux/actions/userActions';
// MUI Stuff
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import Tooltip from '@material-ui/core/Tooltip';
import IconButton from '@material-ui/core/IconButton';

// Icons
import EditIcon from '@material-ui/icons/Edit';

const styles = {
   button: {
       float: 'right'
   }
};

class EditDetails extends Component {
    state = {
        location: '',
        open: false
      };

      mapUserDetailsToState = (credentials) => {
        this.setState({
          location: credentials.location ? credentials.location : ''
        });
      };

      handleOpen = () => {
        this.setState({ open: true });
        this.mapUserDetailsToState(this.props.credentials);
      };

      handleClose = () => {
        this.setState({ open: false });
      };

      componentDidMount() {
        const { credentials } = this.props;
        this.mapUserDetailsToState(credentials);
      }

      handleChange = (event) => {
        this.setState({
          [event.target.name]: event.target.value
        });
      }; 

      handleSubmit = () => {
        const userDetails = {
          location: this.state.location
        };
        this.props.editUserDetails(userDetails);
        this.handleClose();
      };  

    render() {
        const { classes } = this.props;
        return (
            <Fragment>
                <Tooltip title="Edit Details"
                placement="top">
                    <IconButton
                    onClick={this.handleOpen}
                    className={classes.button}>
                       <EditIcon color="primary"/> 
                    </IconButton> 
                </Tooltip>
                <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          fullWidth
          maxWidth="sm"
        >
            <DialogTitle>Edit your Details</DialogTitle>
            <DialogContent>
                <form>
                <TextField
                name="location"
                tpye="text"
                label="Location"
                placeholder="Where you live"
                className={classes.textField}
                value={this.state.location}
                onChange={this.handleChange}
                fullWidth
              />
                </form>
            </DialogContent>
            <DialogActions>
            <Button onClick={this.handleClose} color="primary">
              Cancel
            </Button>
            <Button onClick={this.handleSubmit} color="primary">
              Save
            </Button>
          </DialogActions>
        </Dialog>
            </Fragment>
        )
    }
}

EditDetails.propTypes = {
    editUserDetails: PropTypes.func.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
    credentials: state.user.credentials
  });

export default connect(
    mapStateToProps,
    { editUserDetails }
  )(withStyles(styles)(EditDetails));

---changed code in Profile.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';
import EditDetails from './EditDetails';

// MUI stuff
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';

//Redux stuff
import { connect } from 'react-redux';
import { logoutUser, uploadImage } from '../redux/actions/userActions';

//Icons
import LocationOn from '@material-ui/icons/LocationOn';
import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';
import EditIcon from '@material-ui/icons/Edit';
import KeyboardReturn from '@material-ui/icons/KeyboardReturn';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative',
          '& button': {
            position: 'absolute',
            top: '80%',
            left: '70%'
          }
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        },
        '& svg.button': {
          '&:hover': {
            cursor: 'pointer'
          }
        }
      },
      buttons: {
        textAlign: 'center',
        '& a': {
          margin: '20px 10px'
        }
      }
};

class Profile extends Component {
    handleImageChange = (event) => {
        const image = event.target.files[0];
        const formData = new FormData();
        formData.append('image', image, image.name);
        this.props.uploadImage(formData);
      };
      handleEditPicture = () => {
        const fileInput = document.getElementById('imageInput');
        fileInput.click();
      };
      handleLogout = () => {
        this.props.logoutUser();
      };
    render() {
        const {
            classes,
            user: {
              credentials: { handle, createdAt, imageUrl, location },
              loading,
              authenticated
            }
          } = this.props;

          let profileMarkup = !loading ? (
            authenticated ? (
              <Paper className={classes.paper}>
                <div className={classes.profile}>
                  <div className="image-wrapper">
                    <img src={imageUrl} alt="profile" className="profile-image" />
                    <input
                type="file"
                id="imageInput"
                hidden="hidden"
                onChange={this.handleImageChange}
              />
              <Tooltip title="Edit profile picture"
              placement="top">
              <IconButton
                // tip="Edit profile picture"
                onClick={this.handleEditPicture}
                className="button"
              >
                <EditIcon color="primary" />
              </IconButton>
              </Tooltip>
                  </div>
                    <hr/>
                    <div className="profile-details">
               <MuiLink component={Link} to={`/users/${handle}`}
               color="primary"
               variant="h5">
                   {handle}
               </MuiLink>
               <hr/>
               {location && (
                   <Fragment>
                       <locationOn color="primary"/> 
                   <span>
                       {location}
                   </span>
                   <hr/>
                   </Fragment>
               )}
                <CalendarToday color="primary" />{' '}
              <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
                    </div>
                    <Tooltip title="Logout"
                    placement="top">
                        <IconButton
                        onClick={this.handleLogout}>
                            <KeyboardReturn color="primary"/>
                        </IconButton>
                    </Tooltip>
                    <EditDetails/>
                </div>
              </Paper>
            ) : (
                <Paper className={classes.paper}>
                    <Typography variant="body2" align="center">
                        No profile found,please login again
                    </Typography>
                    <div className={classes.buttons}>
                       <Button variant="contained" color="primary" component={Link} to="/login">
                           Login
                       </Button>
                       <Button variant="contained" color="secondary" component={Link} to="/signup">
                           Signup
                       </Button>
                    </div>
                </Paper>
            )) : (<p>loading...</p>)
                    
                    
        return profileMarkup;
    }
}

const mapStateToProps = (state) => ({
    user: state.user
  });

const mapActionsToProps = { logoutUser, uploadImage };

  
  Profile.propTypes = {
    logoutUser: PropTypes.func.isRequired,
    uploadImage: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(Profile));

*********Navbar Buttons*********

---to change the navbar buttons when user interacts with page

---created MyButton.js in util folder so that we can use it always easily everywhere
---added code in MyButton.js

import React from 'react';

import Tooltip from '@material-ui/core/Tooltip';
import IconButton from '@material-ui/core/IconButton';

export default ({ children, onClick, tip, btnClassName, tipClassName }) => (
  <Tooltip title={tip} className={tipClassName} placement="top">
    <IconButton onClick={onClick} className={btnClassName}>
      {children}
    </IconButton>
  </Tooltip>
);

---added code in navbar.js

import React, { Component, Fragment } from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
// import PostScream from '../scream/PostScream';
// import Notifications from './Notifications';
// MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
// Icons
import AddIcon from '@material-ui/icons/Add';
import HomeIcon from '@material-ui/icons/Home';
import Notifications from '@material-ui/icons/Notifications';

class Navbar extends Component {
    render() {
      const { authenticated } = this.props;
      return (
        <AppBar>
          <Toolbar className="nav-container">
            {authenticated ? (
              <Fragment>
                <MyButton tip="Post a Scream!">
                    <AddIcon color="primary" />
                  </MyButton>
                  <Link to="/">
                  <MyButton tip="Home">
                    <HomeIcon color="primary"/>
                  </MyButton>
                </Link>
                <MyButton tip="Notifications">
                    <Notifications color="primary" />
                  </MyButton>
              </Fragment>
            ) : (
              <Fragment>
                <Button color="inherit" component={Link} to="/login">
                  Login
                </Button>
                <Button color="inherit" component={Link} to="/">
                  Home
                </Button>
                <Button color="inherit" component={Link} to="/signup">
                  Signup
                </Button>
              </Fragment>
            )}
          </Toolbar>
        </AppBar>
      );
    }
  }

Navbar.propTypes = {
    authenticated: PropTypes.bool.isRequired
  };
  
  const mapStateToProps = (state) => ({
    authenticated: state.user.authenticated
  });

export default connect(mapStateToProps)(Navbar);

---changed code in App.css or added piece of code

.nav-container svg {
  color: #fff;
}

---so, we can see the buttons changed in navbar

---changing the code where MyButtons should be used in place of IConButtons and all
---for this changed code in Navbar.js

import React, { Component, Fragment } from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
// import PostScream from '../scream/PostScream';
// import Notifications from './Notifications';
// MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
// Icons
import AddIcon from '@material-ui/icons/Add';
import HomeIcon from '@material-ui/icons/Home';
import Notifications from '@material-ui/icons/Notifications';

class Navbar extends Component {
    render() {
      const { authenticated } = this.props;
      return (
        <AppBar>
          <Toolbar className="nav-container">
            {authenticated ? (
              <Fragment>
                <MyButton tip="Post a Scream!">
                    <AddIcon />
                  </MyButton>
                  <Link to="/">
                  <MyButton tip="Home">
                    <HomeIcon />
                  </MyButton>
                </Link>
                <MyButton tip="Notifications">
                    <Notifications />
                  </MyButton>
              </Fragment>
            ) : (
              <Fragment>
                <Button color="inherit" component={Link} to="/login">
                  Login
                </Button>
                <Button color="inherit" component={Link} to="/">
                  Home
                </Button>
                <Button color="inherit" component={Link} to="/signup">
                  Signup
                </Button>
              </Fragment>
            )}
          </Toolbar>
        </AppBar>
      );
    }
  }

Navbar.propTypes = {
    authenticated: PropTypes.bool.isRequired
  };
  
  const mapStateToProps = (state) => ({
    authenticated: state.user.authenticated
  });

export default connect(mapStateToProps)(Navbar);

---for this changed code in Profile.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';
import EditDetails from './EditDetails';
import MyButton from '../util/MyButton';

// MUI stuff
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';

//Redux stuff
import { connect } from 'react-redux';
import { logoutUser, uploadImage } from '../redux/actions/userActions';

//Icons
import LocationOn from '@material-ui/icons/LocationOn';
import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';
import EditIcon from '@material-ui/icons/Edit';
import KeyboardReturn from '@material-ui/icons/KeyboardReturn';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative',
          '& button': {
            position: 'absolute',
            top: '80%',
            left: '70%'
          }
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        },
        '& svg.button': {
          '&:hover': {
            cursor: 'pointer'
          }
        }
      },
      buttons: {
        textAlign: 'center',
        '& a': {
          margin: '20px 10px'
        }
      }
};

class Profile extends Component {
    handleImageChange = (event) => {
        const image = event.target.files[0];
        const formData = new FormData();
        formData.append('image', image, image.name);
        this.props.uploadImage(formData);
      };
      handleEditPicture = () => {
        const fileInput = document.getElementById('imageInput');
        fileInput.click();
      };
      handleLogout = () => {
        this.props.logoutUser();
      };
    render() {
        const {
            classes,
            user: {
              credentials: { handle, createdAt, imageUrl, location },
              loading,
              authenticated
            }
          } = this.props;

          let profileMarkup = !loading ? (
            authenticated ? (
              <Paper className={classes.paper}>
                <div className={classes.profile}>
                  <div className="image-wrapper">
                    <img src={imageUrl} alt="profile" className="profile-image" />
                    <input
                type="file"
                id="imageInput"
                hidden="hidden"
                onChange={this.handleImageChange}
              />
              <MyButton
                tip="Edit profile picture"
                onClick={this.handleEditPicture}
                btnClassName="button"
              >
                <EditIcon color="primary" />
              </MyButton>
                  </div>
                    <hr/>
                    <div className="profile-details">
               <MuiLink component={Link} to={`/users/${handle}`}
               color="primary"
               variant="h5">
                   {handle}
               </MuiLink>
               <hr/>
               {location && (
                   <Fragment>
                       <locationOn color="primary"/> 
                   <span>
                       {location}
                   </span>
                   <hr/>
                   </Fragment>
               )}
                <CalendarToday color="primary" />{' '}
              <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
                    </div>
                    <MyButton tip="Logout" onClick={this.handleLogout}>
              <KeyboardReturn color="primary" />
            </MyButton>
            <EditDetails />
                </div>
              </Paper>
            ) : (
                <Paper className={classes.paper}>
                    <Typography variant="body2" align="center">
                        No profile found,please login again
                    </Typography>
                    <div className={classes.buttons}>
                       <Button variant="contained" color="primary" component={Link} to="/login">
                           Login
                       </Button>
                       <Button variant="contained" color="secondary" component={Link} to="/signup">
                           Signup
                       </Button>
                    </div>
                </Paper>
            )) : (<p>loading...</p>)
                    
                    
        return profileMarkup;
    }
}

const mapStateToProps = (state) => ({
    user: state.user
  });

const mapActionsToProps = { logoutUser, uploadImage };

  
  Profile.propTypes = {
    logoutUser: PropTypes.func.isRequired,
    uploadImage: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(Profile));

---for this changed code in EditDetails.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../util/MyButton';

// Redux stuff
import { connect } from 'react-redux';
import { editUserDetails } from '../redux/actions/userActions';
// MUI Stuff
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';

// Icons
import EditIcon from '@material-ui/icons/Edit';

const styles = {
   button: {
       float: 'right'
   }
};

class EditDetails extends Component {
    state = {
        location: '',
        open: false
      };

      mapUserDetailsToState = (credentials) => {
        this.setState({
          location: credentials.location ? credentials.location : ''
        });
      };

      handleOpen = () => {
        this.setState({ open: true });
        this.mapUserDetailsToState(this.props.credentials);
      };

      handleClose = () => {
        this.setState({ open: false });
      };

      componentDidMount() {
        const { credentials } = this.props;
        this.mapUserDetailsToState(credentials);
      }

      handleChange = (event) => {
        this.setState({
          [event.target.name]: event.target.value
        });
      }; 

      handleSubmit = () => {
        const userDetails = {
          location: this.state.location
        };
        this.props.editUserDetails(userDetails);
        this.handleClose();
      };  

    render() {
        const { classes } = this.props;
        return (
            <Fragment>
                <MyButton
          tip="Edit Details"
          onClick={this.handleOpen}
          btnClassName={classes.button}
        >
          <EditIcon color="primary" />
        </MyButton>
                <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          fullWidth
          maxWidth="sm"
        >
            <DialogTitle>Edit your Details</DialogTitle>
            <DialogContent>
                <form>
                <TextField
                name="location"
                tpye="text"
                label="Location"
                placeholder="Where you live"
                className={classes.textField}
                value={this.state.location}
                onChange={this.handleChange}
                fullWidth
              />
                </form>
            </DialogContent>
            <DialogActions>
            <Button onClick={this.handleClose} color="primary">
              Cancel
            </Button>
            <Button onClick={this.handleSubmit} color="primary">
              Save
            </Button>
          </DialogActions>
        </Dialog>
            </Fragment>
        )
    }
}

EditDetails.propTypes = {
    editUserDetails: PropTypes.func.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
    credentials: state.user.credentials
  });

export default connect(
    mapStateToProps,
    { editUserDetails }
  )(withStyles(styles)(EditDetails));

********Like and Unlike Actions**********

---added code in types.js

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
// export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
export const LOADING_DATA = 'LOADING_DATA';
export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// Data reducer types
export const SET_SCREAMS = 'SET_SCREAMS';
export const SET_SCREAM = 'SET_SCREAM';
export const LIKE_SCREAM = 'LIKE_SCREAM';
export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
// export const DELETE_SCREAM = 'DELETE_SCREAM';
// export const POST_SCREAM = 'POST_SCREAM';
// export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    // DELETE_SCREAM,
    // SET_ERRORS,
    // POST_SCREAM,
    // CLEAR_ERRORS,
    // LOADING_UI,
    // SET_SCREAM,
    // STOP_LOADING_UI,
    // SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

---added code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    // DELETE_SCREAM,
    // POST_SCREAM,
    // SET_SCREAM,
    // SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
    //   case SET_SCREAM:
    //     return {
    //       ...state,
    //       scream: action.payload
    //     };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        default:
      return state;
  }
}

added code in userReducer.js

import {
    SET_USER,
    // SET_ERRORS,
    // CLEAR_ERRORS,
    // LOADING_UI,
    SET_AUTHENTICATED,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    LIKE_SCREAM,
    UNLIKE_SCREAM
    // MARK_NOTIFICATIONS_READ
  } from '../types';
  
  const initialState = {
    authenticated: false,
    loading: false,
    credentials: {},
    likes: [],
    notifications: []
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_AUTHENTICATED:
        return {
          ...state,
          authenticated: true
        };
        case SET_UNAUTHENTICATED:
            return initialState;
          case SET_USER:
            return {
              authenticated: true,
              loading: false,
              ...action.payload
            };
            case LOADING_USER:
              return {
                ...state,
                loading: true
              };
              case LIKE_SCREAM:
      return {
        ...state,
        likes: [
          ...state.likes,
          {
            userHandle: state.credentials.handle,
            screamId: action.payload.screamId
          }
        ]
      };
    case UNLIKE_SCREAM:
      return {
        ...state,
        likes: state.likes.filter(
          (like) => like.screamId !== action.payload.screamId
        )
      };
            default:
                return state;
            }
          }

---added code in home.js

import React, { Component } from 'react';
import Grid from '@material-ui/core/Grid';
import PropTypes from 'prop-types';

import Scream from '../components/Scream';
import Profile from '../components/Profile';

import { connect } from 'react-redux';
import { getScreams } from '../redux/actions/dataActions';

class home extends Component {
    componentDidMount() {
        this.props.getScreams();
      }
    render() {
        const { screams, loading } = this.props.data;
        let recentScreamsMarkup = !loading ? (
           screams.map((scream) => 
           <Scream key={scream.screamId}
           scream={scream}/>)
       ) : (
           <p>Loading...</p>
       )
        return (
            <Grid container spacing={16}>
                <Grid item sm={8} xs={12}>
                {recentScreamsMarkup}        ​
                </Grid>
                <Grid item sm={4} xs={12}>
                <Profile />
                </Grid>
            </Grid>
        );
    }
}

home.propTypes = {
    getScreams: PropTypes.func.isRequired,
    data: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    data: state.data
  });

export default connect(
    mapStateToProps,
    { getScreams }
  )(home);


---added code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';

// Icons
import ChatIcon from '@material-ui/icons/Chat';
import FavoriteIcon from '@material-ui/icons/Favorite';
import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';


// Redux
import { connect } from 'react-redux';
import { likeScream, unlikeScream } from '../redux/actions/dataActions';


const styles = {
    card: {
        display: 'flex',
        marginBottom: 20,
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover',
    }
};


class Scream extends Component {
    likedScream = () => {
      if(this.props.user.likes && 
        this.props.user.likes.find(like => 
            like.screamId === this.props.scream.screamId))
      return true;
      else return false;
    };
    likeScream = () => {
        this.props.likeScream(this.props.scream.screamId);
    }
    unlikeScream = () => {
        this.props.unlikeScream(this.props.scream.screamId);
    }
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const {
            classes,
            scream: {
              body,
              createdAt,
              userImage,
              userHandle,
            //   screamId,
              likeCount,
              commentCount
            },
            user: {
              authenticated,
            //   credentials: { handle }
            }
          } = this.props;

         const likeButton = !authenticated ? (
             <MyButton tip="Like">
                 <Link to="/login">
                     <FavoriteBorderIcon color="primary" />
                 </Link>
             </MyButton>
         ) : (
             this.likedScream() ? (
                 <MyButton tip="Undo like" onClick={this.unlikeScream}>
                     <FavoriteIcon color="primary"/>
                 </MyButton>
             ) : (
                <MyButton tip="Like" onClick={this.likeScream}>
                <FavoriteBorderIcon color="primary"/>
                </MyButton>
             )
         )

        // let classes = this.props.classes;

        // const scream = this.props.scream;
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>
                {likeButton}
          <span>{likeCount} Likes</span>
          <MyButton tip="comments">
            <ChatIcon color="primary" />
          </MyButton>
          <span>{commentCount} comments</span>
          {/* <ScreamDialog
            screamId={screamId}
            userHandle={userHandle}
            openDialog={this.props.openDialog}
          /> */}
                </CardContent>
            </Card>
        );
    }

}

Scream.propTypes = {
    likeScream: PropTypes.func.isRequired,
    unlikeScream: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    scream: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
  user: state.user
});

const mapActionsToProps = {
   likeScream,
   unlikeScream
}
  
  export default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Scream));

---so now we can like and unlike screams

*******Delete Button********

---created DeleteScream.js in components folder

---added code in types.js

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
// export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
export const LOADING_DATA = 'LOADING_DATA';
export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// Data reducer types
export const SET_SCREAMS = 'SET_SCREAMS';
export const SET_SCREAM = 'SET_SCREAM';
export const LIKE_SCREAM = 'LIKE_SCREAM';
export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
export const DELETE_SCREAM = 'DELETE_SCREAM';
// export const POST_SCREAM = 'POST_SCREAM';
// export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    DELETE_SCREAM,
    // SET_ERRORS,
    // POST_SCREAM,
    // CLEAR_ERRORS,
    // LOADING_UI,
    // SET_SCREAM,
    // STOP_LOADING_UI,
    // SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  export const deleteScream = (screamId) => (dispatch) => {
    axios
      .delete(`/scream/${screamId}`)
      .then(() => {
        dispatch({ type: DELETE_SCREAM, payload: screamId });
      })
      .catch((err) => console.log(err));
  };
  

---added code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    DELETE_SCREAM,
    // POST_SCREAM,
    // SET_SCREAM,
    // SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
    //   case SET_SCREAM:
    //     return {
    //       ...state,
    //       scream: action.payload
    //     };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        case DELETE_SCREAM:
      index = state.screams.findIndex(
        (scream) => scream.screamId === action.payload
      );
      state.screams.splice(index, 1);
      return {
        ...state
      };
        default:
      return state;
  }
}

---added code in DeleteScream.js

import React, { Component, Fragment } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';

// MUI Stuff
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogActions from '@material-ui/core/DialogActions';
import DeleteIcon from '@material-ui/icons/Delete';

//Redux
import { connect } from 'react-redux';
import { deleteScream } from '../redux/actions/dataActions';

const styles = {
    deleteButton: {
      position: 'absolute',
      left: '90%',
      top: '10%'
    }
  };

class DeleteScream extends Component {
    state = {
        open: false
      };
      handleOpen = () => {
        this.setState({ open: true });
      };
      handleClose = () => {
        this.setState({ open: false });
      };
      deleteScream = () => {
        this.props.deleteScream(this.props.screamId);
        this.setState({ open: false });
      };
    render() {
        const { classes } = this.props;
        return (
            <Fragment>
        <MyButton
          tip="Delete Scream"
          onClick={this.handleOpen}
          btnClassName={classes.deleteButton}
        >
          <DeleteIcon color="secondary" />
        </MyButton>
        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          fullWidth
          maxWidth="sm"
        >
          <DialogTitle>
            Are you sure you want to delete this scream ?
          </DialogTitle>
          <DialogActions>
            <Button onClick={this.handleClose} color="primary">
              Cancel
            </Button>
            <Button onClick={this.deleteScream} color="secondary">
              Delete
            </Button>
          </DialogActions>
        </Dialog>
        </Fragment>
        );
    }
}

DeleteScream.propTypes = {
    deleteScream: PropTypes.func.isRequired,
    classes: PropTypes.object.isRequired,
    screamId: PropTypes.string.isRequired
  };
  
  export default connect(
    null,
    { deleteScream }
  )(withStyles(styles)(DeleteScream));

---added code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
import DeleteScream from './DeleteScream';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';

// Icons
import ChatIcon from '@material-ui/icons/Chat';
import FavoriteIcon from '@material-ui/icons/Favorite';
import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';


// Redux
import { connect } from 'react-redux';
import { likeScream, unlikeScream } from '../redux/actions/dataActions';


const styles = {
    card: {
        position: 'relative',
        display: 'flex',
        marginBottom: 20
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover'
    }
};


class Scream extends Component {
    likedScream = () => {
      if(this.props.user.likes && 
        this.props.user.likes.find(like => 
            like.screamId === this.props.scream.screamId))
      return true;
      else return false;
    };
    likeScream = () => {
        this.props.likeScream(this.props.scream.screamId);
    }
    unlikeScream = () => {
        this.props.unlikeScream(this.props.scream.screamId);
    }
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const {
            classes,
            scream: {
              body,
              createdAt,
              userImage,
              userHandle,
              screamId,
              likeCount,
              commentCount
            },
            user: {
              authenticated,
              credentials: { handle }
            }
          } = this.props;

         const likeButton = !authenticated ? (
             <MyButton tip="Like">
                 <Link to="/login">
                     <FavoriteBorderIcon color="primary" />
                 </Link>
             </MyButton>
         ) : (
             this.likedScream() ? (
                 <MyButton tip="Undo like" onClick={this.unlikeScream}>
                     <FavoriteIcon color="primary"/>
                 </MyButton>
             ) : (
                <MyButton tip="Like" onClick={this.likeScream}>
                <FavoriteBorderIcon color="primary"/>
                </MyButton>
             )
         )

         const deleteButton =
         authenticated && userHandle === handle ? (
         <DeleteScream screamId={screamId} />
    ) :  null;
        
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                {deleteButton}
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>
                {likeButton}
          <span>{likeCount} Likes</span>
          <MyButton tip="comments">
            <ChatIcon color="primary" />
          </MyButton>
          <span>{commentCount} comments</span>
          {/* <ScreamDialog
            screamId={screamId}
            userHandle={userHandle}
            openDialog={this.props.openDialog}
          /> */}
                </CardContent>
            </Card>
        );
    }

}

Scream.propTypes = {
    likeScream: PropTypes.func.isRequired,
    unlikeScream: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    scream: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
  user: state.user
});

const mapActionsToProps = {
   likeScream,
   unlikeScream
}
  
  export default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Scream));

*******Add Scream Component**********

---created PostScream.js in components folder

---added code in types.js

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
// export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
export const LOADING_DATA = 'LOADING_DATA';
export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// Data reducer types
export const SET_SCREAMS = 'SET_SCREAMS';
export const SET_SCREAM = 'SET_SCREAM';
export const LIKE_SCREAM = 'LIKE_SCREAM';
export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
export const DELETE_SCREAM = 'DELETE_SCREAM';
export const POST_SCREAM = 'POST_SCREAM';
// export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in Navbar.js

import React, { Component, Fragment } from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
import PostScream from './PostScream';
// import Notifications from './Notifications';
// MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
// Icons
import HomeIcon from '@material-ui/icons/Home';
import Notifications from '@material-ui/icons/Notifications';

class Navbar extends Component {
    render() {
      const { authenticated } = this.props;
      return (
        <AppBar>
          <Toolbar className="nav-container">
            {authenticated ? (
              <Fragment>
                <PostScream/>
                  <Link to="/">
                  <MyButton tip="Home">
                    <HomeIcon />
                  </MyButton>
                </Link>
                <MyButton tip="Notifications">
                    <Notifications />
                  </MyButton>
              </Fragment>
            ) : (
              <Fragment>
                <Button color="inherit" component={Link} to="/login">
                  Login
                </Button>
                <Button color="inherit" component={Link} to="/">
                  Home
                </Button>
                <Button color="inherit" component={Link} to="/signup">
                  Signup
                </Button>
              </Fragment>
            )}
          </Toolbar>
        </AppBar>
      );
    }
  }

Navbar.propTypes = {
    authenticated: PropTypes.bool.isRequired
  };
  
  const mapStateToProps = (state) => ({
    authenticated: state.user.authenticated
  });

export default connect(mapStateToProps)(Navbar);

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    DELETE_SCREAM,
    SET_ERRORS,
    POST_SCREAM,
    CLEAR_ERRORS,
    LOADING_UI,
    // SET_SCREAM,
    // STOP_LOADING_UI,
    // SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  // Post a scream
export const postScream = (newScream) => (dispatch) => {
  dispatch({ type: LOADING_UI });
  axios
    .post('/scream', newScream)
    .then((res) => {
      dispatch({
        type: POST_SCREAM,
        payload: res.data
      });
      dispatch({ type: CLEAR_ERRORS });
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  //Delete a Scream
  export const deleteScream = (screamId) => (dispatch) => {
    axios
      .delete(`/scream/${screamId}`)
      .then(() => {
        dispatch({ type: DELETE_SCREAM, payload: screamId });
      })
      .catch((err) => console.log(err));
  };
  
---added code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    DELETE_SCREAM,
    POST_SCREAM,
    // SET_SCREAM,
    // SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
    //   case SET_SCREAM:
    //     return {
    //       ...state,
    //       scream: action.payload
    //     };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        case DELETE_SCREAM:
      index = state.screams.findIndex(
        (scream) => scream.screamId === action.payload
      );
      state.screams.splice(index, 1);
      return {
        ...state
      };
      case POST_SCREAM:
      return {
        ...state,
        screams: [action.payload, ...state.screams]
      };
        default:
      return state;
  }
}

---added code in PostScream.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../util/MyButton';
// MUI Stuff
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import CircularProgress from '@material-ui/core/CircularProgress';
import AddIcon from '@material-ui/icons/Add';
import CloseIcon from '@material-ui/icons/Close';
// Redux stuff
import { connect } from 'react-redux';
import { postScream } from '../redux/actions/dataActions';

const styles = {
    submitButton: {
      position: 'relative',
      float: 'right',
      marginTop: 10
    },
    progressSpinner: {
      position: 'absolute'
    },
    closeButton: {
      position: 'absolute',
      left: '91%',
      top: '6%'
    }
  };

class PostScream extends Component {
    state = {
        open: false,
        body: '',
        errors: {}
      };
      componentWillReceiveProps(nextProps) {
        if (nextProps.UI.errors) {
          this.setState({
            errors: nextProps.UI.errors
          });
        }
        if (!nextProps.UI.errors && !nextProps.UI.loading) {
          this.setState({ body: '', open: false, errors: {} });
        }
      }
      handleOpen = () => {
        this.setState({ open: true });
      };
      handleClose = () => {
        // this.props.clearErrors();
        this.setState({ open: false, errors: {} });
      };
      handleChange = (event) => {
        this.setState({ [event.target.name]: event.target.value });
      };
      handleSubmit = (event) => {
        event.preventDefault();
        this.props.postScream({ body: this.state.body });
      };
      render() {
        const { errors } = this.state;
        const {
          classes,
          UI: { loading }
        } = this.props;
        return (
          <Fragment>
            <MyButton onClick={this.handleOpen} tip="Post a Scream!">
              <AddIcon />
            </MyButton>
            <Dialog
              open={this.state.open}
              onClose={this.handleClose}
              fullWidth
              maxWidth="sm"
            >
              <MyButton
                tip="Close"
                onClick={this.handleClose}
                tipClassName={classes.closeButton}
              >
                <CloseIcon />
              </MyButton>
              <DialogTitle>Post a new scream</DialogTitle>
              <DialogContent>
                <form onSubmit={this.handleSubmit}>
                  <TextField
                    name="body"
                    type="text"
                    label="SCREAM!!"
                    multiline
                    rows="3"
                    placeholder="Scream at your fellow apes"
                    error={errors.body ? true : false}
                    helperText={errors.body}
                    className={classes.textField}
                    onChange={this.handleChange}
                    fullWidth
                  />
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    className={classes.submitButton}
                    disabled={loading}
                  >
                    Submit
                    {loading && (
                      <CircularProgress
                        size={30}
                        className={classes.progressSpinner}
                      />
                    )}
                  </Button>
                </form>
              </DialogContent>
            </Dialog>
          </Fragment>
        );
      }
    }

PostScream.propTypes = {
    postScream: PropTypes.func.isRequired,
    // clearErrors: PropTypes.func.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    UI: state.UI
  });
  
  export default connect(
    mapStateToProps,
    { postScream }
  )(withStyles(styles)(PostScream));

---so we get the post scream button active

***********Scream Dialog**********

---the previous code written gives one error like when we submit scream, first it gives us 
   errors saying body must not be empty
---so for fixing it added CLEAR_ERRORS

---added piece of code in dataActions.js

export const clearErrors = () => (dispatch) => {
    dispatch({ type: CLEAR_ERRORS });
  };

---added code in PostScream.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../util/MyButton';
// MUI Stuff
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import CircularProgress from '@material-ui/core/CircularProgress';
import AddIcon from '@material-ui/icons/Add';
import CloseIcon from '@material-ui/icons/Close';
// Redux stuff
import { connect } from 'react-redux';
import { postScream, clearErrors } from '../redux/actions/dataActions';

const styles = {
    submitButton: {
      position: 'relative',
      float: 'right',
      marginTop: 10
    },
    progressSpinner: {
      position: 'absolute'
    },
    closeButton: {
      position: 'absolute',
      left: '91%',
      top: '6%'
    }
  };

class PostScream extends Component {
    state = {
        open: false,
        body: '',
        errors: {}
      };
      componentWillReceiveProps(nextProps) {
        if (nextProps.UI.errors) {
          this.setState({
            errors: nextProps.UI.errors
          });
        }
        if (!nextProps.UI.errors && !nextProps.UI.loading) {
          this.setState({ body: '', open: false, errors: {} });
        }
      }
      handleOpen = () => {
        this.setState({ open: true });
      };
      handleClose = () => {
        this.props.clearErrors();
        this.setState({ open: false, errors: {} });
      };
      handleChange = (event) => {
        this.setState({ [event.target.name]: event.target.value });
      };
      handleSubmit = (event) => {
        event.preventDefault();
        this.props.postScream({ body: this.state.body });
      };
      render() {
        const { errors } = this.state;
        const {
          classes,
          UI: { loading }
        } = this.props;
        return (
          <Fragment>
            <MyButton onClick={this.handleOpen} tip="Post a Scream!">
              <AddIcon />
            </MyButton>
            <Dialog
              open={this.state.open}
              onClose={this.handleClose}
              fullWidth
              maxWidth="sm"
            >
              <MyButton
                tip="Close"
                onClick={this.handleClose}
                tipClassName={classes.closeButton}
              >
                <CloseIcon />
              </MyButton>
              <DialogTitle>Post a new scream</DialogTitle>
              <DialogContent>
                <form onSubmit={this.handleSubmit}>
                  <TextField
                    name="body"
                    type="text"
                    label="SCREAM!!"
                    multiline
                    rows="3"
                    placeholder="Scream at your fellow apes"
                    error={errors.body ? true : false}
                    helperText={errors.body}
                    className={classes.textField}
                    onChange={this.handleChange}
                    fullWidth
                  />
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    className={classes.submitButton}
                    disabled={loading}
                  >
                    Submit
                    {loading && (
                      <CircularProgress
                        size={30}
                        className={classes.progressSpinner}
                      />
                    )}
                  </Button>
                </form>
              </DialogContent>
            </Dialog>
          </Fragment>
        );
      }
    }

PostScream.propTypes = {
    postScream: PropTypes.func.isRequired,
    clearErrors: PropTypes.func.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    UI: state.UI
  });
  
  export default connect(
    mapStateToProps,
    { postScream, clearErrors }
  )(withStyles(styles)(PostScream));

---so the error is gone

---created ScreamDialog.js in components folder

---added code in uiReducer.js

import {
  SET_ERRORS,
  CLEAR_ERRORS,
  LOADING_UI,
  STOP_LOADING_UI
} from '../types';

  const initialState = {
    loading: false,
    errors: null
  };
  
  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_ERRORS:
        return {
          ...state,
          loading: false,
          errors: action.payload
        };
      case CLEAR_ERRORS:
        return {
          ...state,
          loading: false,
          errors: null
        };
      case LOADING_UI:
        return {
          ...state,
          loading: true
        };
      case STOP_LOADING_UI:
        return {
          ...state,
          loading: false
        };
      default:
        return state;
        }
      }

--added code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    DELETE_SCREAM,
    POST_SCREAM,
    SET_SCREAM,
    // SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
      case SET_SCREAM:
        return {
          ...state,
          scream: action.payload
        };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        case DELETE_SCREAM:
      index = state.screams.findIndex(
        (scream) => scream.screamId === action.payload
      );
      state.screams.splice(index, 1);
      return {
        ...state
      };
      case POST_SCREAM:
      return {
        ...state,
        screams: [action.payload, ...state.screams]
      };
        default:
      return state;
  }
}

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    DELETE_SCREAM,
    SET_ERRORS,
    POST_SCREAM,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_SCREAM,
    STOP_LOADING_UI,
    // SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  export const getScream = (screamId) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .get(`/scream/${screamId}`)
      .then((res) => {
        dispatch({
          type: SET_SCREAM,
          payload: res.data
        });
        dispatch({ type: STOP_LOADING_UI });
      })
      .catch((err) => console.log(err));
  };

  // Post a scream
export const postScream = (newScream) => (dispatch) => {
  dispatch({ type: LOADING_UI });
  axios
    .post('/scream', newScream)
    .then((res) => {
      dispatch({
        type: POST_SCREAM,
        payload: res.data
      });
      dispatch({ type: CLEAR_ERRORS });
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  //Delete a Scream
  export const deleteScream = (screamId) => (dispatch) => {
    axios
      .delete(`/scream/${screamId}`)
      .then(() => {
        dispatch({ type: DELETE_SCREAM, payload: screamId });
      })
      .catch((err) => console.log(err));
  };
  
  export const clearErrors = () => (dispatch) => {
    dispatch({ type: CLEAR_ERRORS });
  };

---added code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
import DeleteScream from './DeleteScream';
import ScreamDialog from './ScreamDialog';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';

// Icons
import ChatIcon from '@material-ui/icons/Chat';
import FavoriteIcon from '@material-ui/icons/Favorite';
import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';


// Redux
import { connect } from 'react-redux';
import { likeScream, unlikeScream } from '../redux/actions/dataActions';


const styles = {
    card: {
        position: 'relative',
        display: 'flex',
        marginBottom: 20
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover'
    }
};


class Scream extends Component {
    likedScream = () => {
      if(this.props.user.likes && 
        this.props.user.likes.find(like => 
            like.screamId === this.props.scream.screamId))
      return true;
      else return false;
    };
    likeScream = () => {
        this.props.likeScream(this.props.scream.screamId);
    }
    unlikeScream = () => {
        this.props.unlikeScream(this.props.scream.screamId);
    }
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const {
            classes,
            scream: {
              body,
              createdAt,
              userImage,
              userHandle,
              screamId,
              likeCount,
              commentCount
            },
            user: {
              authenticated,
              credentials: { handle }
            }
          } = this.props;

         const likeButton = !authenticated ? (
             <MyButton tip="Like">
                 <Link to="/login">
                     <FavoriteBorderIcon color="primary" />
                 </Link>
             </MyButton>
         ) : (
             this.likedScream() ? (
                 <MyButton tip="Undo like" onClick={this.unlikeScream}>
                     <FavoriteIcon color="primary"/>
                 </MyButton>
             ) : (
                <MyButton tip="Like" onClick={this.likeScream}>
                <FavoriteBorderIcon color="primary"/>
                </MyButton>
             )
         )

         const deleteButton =
         authenticated && userHandle === handle ? (
         <DeleteScream screamId={screamId} />
    ) :  null;
        
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                {deleteButton}
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>
                {likeButton}
          <span>{likeCount} Likes</span>
          <MyButton tip="comments">
            <ChatIcon color="primary" />
          </MyButton>
          <span>{commentCount} comments</span>
          <ScreamDialog
            screamId={screamId}
            userHandle={userHandle}
            // openDialog={this.props.openDialog}
          />
                </CardContent>
            </Card>
        );
    }

}

Scream.propTypes = {
    likeScream: PropTypes.func.isRequired,
    unlikeScream: PropTypes.func.isRequired,
    user: PropTypes.object.isRequired,
    scream: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
  user: state.user
});

const mapActionsToProps = {
   likeScream,
   unlikeScream
}
  
  export default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Scream));

---added code in ScreamDialog.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../util/MyButton';
// import LikeButton from './LikeButton';
// import Comments from './Comments';
// import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
// import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream } from '../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false
    //   oldPath: '',
    //   newPath: ''
    };
    handleOpen = () => {
        this.setState({ open: true });
        this.props.getScream(this.props.screamId);
    }
    handleClose = () => {
        this.setState({ open: false });
    }

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                {/* <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span> */}
              </Grid>
              {/* <hr className={classes.visibleSeparator} />
              <CommentForm screamId={screamId} />
              <Comments comments={comments} /> */}
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    // clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream
    // clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

---so, we can see the expanded version of scream by clicking on two arrows

*******Scream Dialog Details********

---created LikeButton.js in components folder
---added code in LikeButton.js

import React, { Component } from 'react';
import MyButton from '../util/MyButton';
import { Link } from 'react-router-dom';
import PropTypes from 'prop-types';
// Icons
import FavoriteIcon from '@material-ui/icons/Favorite';
import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';
// REdux
import { connect } from 'react-redux';
import { likeScream, unlikeScream } from '../redux/actions/dataActions';

export class LikeButton extends Component {
    likedScream = () => {
        if(this.props.user.likes && 
          this.props.user.likes.find(like => 
              like.screamId === this.props.screamId))
        return true;
        else return false;
      };
      likeScream = () => {
          this.props.likeScream(this.props.screamId);
      }
      unlikeScream = () => {
          this.props.unlikeScream(this.props.screamId);
      };
    render() {
        const { authenticated } = this.props.user;
        const likeButton = !authenticated ? (
            <Link to="/login">
            <MyButton tip="Like">
                    <FavoriteBorderIcon color="primary" />
            </MyButton>
            </Link>
        ) : (
            this.likedScream() ? (
                <MyButton tip="Undo like" onClick={this.unlikeScream}>
                    <FavoriteIcon color="primary"/>
                </MyButton>
            ) : (
               <MyButton tip="Like" onClick={this.likeScream}>
               <FavoriteBorderIcon color="primary"/>
               </MyButton>
            )
        )
        return likeButton;
    }
}

LikeButton.propTypes = {
    user: PropTypes.object.isRequired,
    screamId: PropTypes.string.isRequired,
    likeScream: PropTypes.func.isRequired,
    unlikeScream: PropTypes.func.isRequired
  };
  
  const mapStateToProps = (state) => ({
    user: state.user
  });
  
  const mapActionsToProps = {
    likeScream,
    unlikeScream
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(LikeButton);


---modified code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
import MyButton from '../util/MyButton';
import DeleteScream from './DeleteScream';
import ScreamDialog from './ScreamDialog';
import LikeButton from './LikeButton';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';

// Icons
import ChatIcon from '@material-ui/icons/Chat';
import FavoriteIcon from '@material-ui/icons/Favorite';
import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';


// Redux
import { connect } from 'react-redux';
import { likeScream, unlikeScream } from '../redux/actions/dataActions';


const styles = {
    card: {
        position: 'relative',
        display: 'flex',
        marginBottom: 20
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover'
    }
};


class Scream extends Component {
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const {
            classes,
            scream: {
              body,
              createdAt,
              userImage,
              userHandle,
              screamId,
              likeCount,
              commentCount
            },
            user: {
              authenticated,
              credentials: { handle }
            }
          } = this.props;

         const deleteButton =
         authenticated && userHandle === handle ? (
         <DeleteScream screamId={screamId} />
    ) :  null;
        
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                {deleteButton}
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>
                <LikeButton screamId={screamId}/>
          <span>{likeCount} Likes</span>
          <MyButton tip="comments">
            <ChatIcon color="primary" />
          </MyButton>
          <span>{commentCount} comments</span>
          <ScreamDialog
            screamId={screamId}
            userHandle={userHandle}
            // openDialog={this.props.openDialog}
          />
                </CardContent>
            </Card>
        );
    }

}

Scream.propTypes = {
    user: PropTypes.object.isRequired,
    scream: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };

  const mapStateToProps = (state) => ({
  user: state.user
});
  
export default connect(mapStateToProps)(withStyles(styles)(Scream));

---this way, LikeButton got an independent component which can be used anywhere we like

---changed code in ScreamDialog.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../util/MyButton';
import LikeButton from './LikeButton';
// import Comments from './Comments';
// import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream } from '../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false
    //   oldPath: '',
    //   newPath: ''
    };
    handleOpen = () => {
        this.setState({ open: true });
        this.props.getScream(this.props.screamId);
    }
    handleClose = () => {
        this.setState({ open: false });
    }

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span>
              </Grid>
              {/* <hr className={classes.visibleSeparator} />
              <CommentForm screamId={screamId} />
              <Comments comments={comments} /> */}
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    // clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream
    // clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

---changed code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    DELETE_SCREAM,
    POST_SCREAM,
    SET_SCREAM,
    // SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
      case SET_SCREAM:
        return {
          ...state,
          scream: action.payload
        };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        case DELETE_SCREAM:
      index = state.screams.findIndex(
        (scream) => scream.screamId === action.payload
      );
      state.screams.splice(index, 1);
      return {
        ...state
      };
      case POST_SCREAM:
      return {
        ...state,
        screams: [action.payload, ...state.screams]
      };
        default:
      return state;
  }
}

---this way, we can see likebutton and commentbutton on expanded dialog.(& we can also
   increment like from expanded dialog box)

********Displaying Comments*********

---created scream, layout, profile folder in components folder
---moved Navbar.js in layout folder
---moved Profile.js, EditDetails.js in profile folder
---moved Scream.js, ScreamDialog.js, PostScream.js, LikeButton.js, DeleteScream.js
   in scream folder

***********************************

import MyButton from '../../util/MyButton';

import { logoutUser, uploadImage } from '../../redux/actions/userActions';

import PostScream from '../scream/PostScream';

import Scream from '../components/scream/Scream';
import Profile from '../components/profile/Profile';

import Navbar from './components/layout/Navbar';

                                    ************************************

---above are some code changed, figure out yourself

---written code in Comments.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';
// MUI
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';

const styles = {
    commentImage: {
      maxWidth: '100%',
      height: 100,
      objectFit: 'cover',
      borderRadius: '50%'
    },
    commentData: {
      marginLeft: 20
    }
  }

  class Comments extends Component {
    render() {
      const { comments, classes } = this.props;
      return (
        <Grid container>
          {comments.map((comment, index) => {
            const { body, createdAt, userImage, userHandle } = comment;
            return (
              <Fragment key={createdAt}>
                <Grid item sm={12}>
                  <Grid container>
                    <Grid item sm={2}>
                      <img
                        src={userImage}
                        alt="comment"
                        className={classes.commentImage}
                      />
                    </Grid>
                    <Grid item sm={9}>
                      <div className={classes.commentData}>
                        <Typography
                          variant="h5"
                          component={Link}
                          to={`/users/${userHandle}`}
                          color="primary"
                        >
                          {userHandle}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                          {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                        </Typography>
                        <hr className={classes.invisibleSeparator} />
                        <Typography variabnt="body1">{body}</Typography>
                      </div>
                    </Grid>
                  </Grid>
                </Grid>
                {index !== comments.length - 1 && (
                  <hr className={classes.visibleSeparator} />
                )}
              </Fragment>
            );
          })}
        </Grid>
      );
    }
  }
  
  Comments.propTypes = {
    comments: PropTypes.array.isRequired
  };
  
  export default withStyles(styles)(Comments);

---changed code in ScreamDialog.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../../util/MyButton';
import LikeButton from './LikeButton';
import Comments from './Comments';
// import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream } from '../../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    visibleSeperator: {
      width: '100%',
      borderBottom: '1px solid rgba(0, 0, 0, 0.1)',
      marginBottom: 20
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false
    //   oldPath: '',
    //   newPath: ''
    };
    handleOpen = () => {
        this.setState({ open: true });
        this.props.getScream(this.props.screamId);
    }
    handleClose = () => {
        this.setState({ open: false });
    }

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span>
              </Grid>
              <hr className={classes.visibleSeparator} />
              {/* <CommentForm screamId={screamId} /> */}
              <Comments comments={comments} />
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    // clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream
    // clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

***********Submitting Comments************

---created CommentForm.js in scream folder in components folder
---added code in CommentForm.js

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
// MUI Stuff
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import TextField from '@material-ui/core/TextField';
// Redux stuff
import { connect } from 'react-redux';
import { submitComment } from '../../redux/actions/dataActions';

const styles = {
    palette: {
        primary: {
          light: '#33c9dc',
          main: '#00bcd4',
          dark: '#008394',
          contrastText: '#fff'
        },
        secondary: {
          light: '#ff6333',
          main: '#ff3d00',
          dark: '#b22a00',
          contrastText: '#fff'
        }
      },
      typography: {
        useNextVariants: true
      },
      form: {
        textAlign: 'center'
      },
      image: {
        margin: '20px auto 20px auto'
      },
      pageTitle: {
        margin: '10px auto 10px auto'
      },
      textField: {
        margin: '10px auto 10px auto'
      },
      button: {
        marginTop: 20,
        position: 'relative'
      },
      customError: {
        color: 'red',
        fontSize: '0.8rem',
        marginTop: 10
      },
      progress: {
        position: 'absolute'
      },
      invisibleSeparator: {
        border: 'none',
        margin: 4
      },
      visibleSeparator: {
        width: '100%',
        borderBottom: '1px solid rgba(0,0,0,0.1)',
        marginBottom: 20
      }
}
 

class CommentForm extends Component {
  state = {
    body: '',
    errors: {}
  };

  componentWillReceiveProps(nextProps) {
    if (nextProps.UI.errors) {
      this.setState({ errors: nextProps.UI.errors });
    }
    if (!nextProps.UI.errors && !nextProps.UI.loading) {
      this.setState({ body: '' });
    }
  }

  handleChange = (event) => {
    this.setState({ [event.target.name]: event.target.value });
  };
  handleSubmit = (event) => {
    event.preventDefault();
    this.props.submitComment(this.props.screamId, { body: this.state.body });
  };

  render() {
    const { classes, authenticated } = this.props;
    const errors = this.state.errors;

    const commentFormMarkup = authenticated ? (
      <Grid item sm={12} style={{ textAlign: 'center' }}>
        <form onSubmit={this.handleSubmit}>
          <TextField
            name="body"
            type="text"
            label="Comment on scream"
            error={errors.comment ? true : false}
            helperText={errors.comment}
            value={this.state.body}
            onChange={this.handleChange}
            fullWidth
            className={classes.textField}
          />
          <Button
            type="submit"
            variant="contained"
            color="primary"
            className={classes.button}
          >
            Submit
          </Button>
        </form>
        <hr className={classes.visibleSeparator} />
      </Grid>
    ) : null;
    return commentFormMarkup;
  }
}

CommentForm.propTypes = {
  submitComment: PropTypes.func.isRequired,
  UI: PropTypes.object.isRequired,
  classes: PropTypes.object.isRequired,
  screamId: PropTypes.string.isRequired,
  authenticated: PropTypes.bool.isRequired
};

const mapStateToProps = (state) => ({
  UI: state.UI,
  authenticated: state.user.authenticated
});

export default connect(
  mapStateToProps,
  { submitComment }
)(withStyles(styles)(CommentForm));

---added code in ScreamDialog.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../../util/MyButton';
import LikeButton from './LikeButton';
import Comments from './Comments';
import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream, clearErrors } from '../../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    visibleSeperator: {
      width: '100%',
      borderBottom: '1px solid rgba(0, 0, 0, 0.1)',
      marginBottom: 20
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false
    //   oldPath: '',
    //   newPath: ''
    };
    handleOpen = () => {
        this.setState({ open: true });
        this.props.getScream(this.props.screamId);
    }
    handleClose = () => {
        this.setState({ open: false });
        this.props.clearErrors();
    }

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span>
              </Grid>
              <hr className={classes.visibleSeparator} />
              <CommentForm screamId={screamId} />
              <Comments comments={comments} />
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream,
    clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

---added code in types.js

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
// export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
export const LOADING_DATA = 'LOADING_DATA';
export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// Data reducer types
export const SET_SCREAMS = 'SET_SCREAMS';
export const SET_SCREAM = 'SET_SCREAM';
export const LIKE_SCREAM = 'LIKE_SCREAM';
export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
export const DELETE_SCREAM = 'DELETE_SCREAM';
export const POST_SCREAM = 'POST_SCREAM';
export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    DELETE_SCREAM,
    SET_ERRORS,
    POST_SCREAM,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_SCREAM,
    STOP_LOADING_UI,
    SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  //Get One Scream
  export const getScream = (screamId) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .get(`/scream/${screamId}`)
      .then((res) => {
        dispatch({
          type: SET_SCREAM,
          payload: res.data
        });
        dispatch({ type: STOP_LOADING_UI });
      })
      .catch((err) => console.log(err));
  };

  // Post a scream
export const postScream = (newScream) => (dispatch) => {
  dispatch({ type: LOADING_UI });
  axios
    .post('/scream', newScream)
    .then((res) => {
      dispatch({
        type: POST_SCREAM,
        payload: res.data
      });
      dispatch(clearErrors());
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  // Submit a comment
export const submitComment = (screamId, commentData) => (dispatch) => {
  axios
    .post(`/scream/${screamId}/comment`, commentData)
    .then((res) => {
      dispatch({
        type: SUBMIT_COMMENT,
        payload: res.data
      });
      dispatch(clearErrors());
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  //Delete a Scream
  export const deleteScream = (screamId) => (dispatch) => {
    axios
      .delete(`/scream/${screamId}`)
      .then(() => {
        dispatch({ type: DELETE_SCREAM, payload: screamId });
      })
      .catch((err) => console.log(err));
  };
  
  export const clearErrors = () => (dispatch) => {
    dispatch({ type: CLEAR_ERRORS });
  };

---added code in dataReducer.js

import {
    SET_SCREAMS,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    LOADING_DATA,
    DELETE_SCREAM,
    POST_SCREAM,
    SET_SCREAM,
    SUBMIT_COMMENT
  } from '../types';
  
  const initialState = {
    screams: [],
    scream: {},
    loading: false
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case LOADING_DATA:
        return {
          ...state,
          loading: true
        };
      case SET_SCREAMS:
        return {
          ...state,
          screams: action.payload,
          loading: false
        };
      case SET_SCREAM:
        return {
          ...state,
          scream: action.payload
        };
      case LIKE_SCREAM:
      case UNLIKE_SCREAM:
        let index = state.screams.findIndex(
          (scream) => scream.screamId === action.payload.screamId
        );
        state.screams[index] = action.payload;
        if (state.scream.screamId === action.payload.screamId) {
          state.scream = action.payload;
        }
        return {
          ...state
        };
        case DELETE_SCREAM:
      index = state.screams.findIndex(
        (scream) => scream.screamId === action.payload
      );
      state.screams.splice(index, 1);
      return {
        ...state
      };
      case POST_SCREAM:
      return {
        ...state,
        screams: [action.payload, ...state.screams]
      };
      case SUBMIT_COMMENT:
      return {
        ...state,
        scream: {
          ...state.scream,
          comments: [action.payload, ...state.scream.comments]
        }
      };
        default:
      return state;
  }
}

*********User Page*********

---created user.js file in pages folder
---created StaticProfile.js in profile folder in components folder

---added code in user.js 

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import Scream from '../components/scream/Scream';
import StaticProfile from '../components/profile/StaticProfile';
import Grid from '@material-ui/core/Grid';

// import ScreamSkeleton from '../util/ScreamSkeleton';
// import ProfileSkeleton from '../util/ProfileSkeleton';

import { connect } from 'react-redux';
import { getUserData } from '../redux/actions/dataActions';

class user extends Component {
    state = {
      profile: null,
    //   screamIdParam: null
    };
    componentDidMount() {
      const handle = this.props.match.params.handle;
    //   const screamId = this.props.match.params.screamId;
  
    //   if (screamId) this.setState({ screamIdParam: screamId });
  
      this.props.getUserData(handle);
      axios
        .get(`/user/${handle}`)
        .then((res) => {
          this.setState({
            profile: res.data.user
          });
        })
        .catch((err) => console.log(err));
    }
    render() {
      const { screams, loading } = this.props.data;
    //   const { screamIdParam } = this.state;
  
      const screamsMarkup = loading ? (
        <p>Loading data...</p>
      ) : screams === null ? (
        <p>No screams from this user</p>
    //   ) : !screamIdParam ? (
    //     screams.map((scream) => <Scream key={scream.screamId} scream={scream} />)
      ) : (
        screams.map((scream) => 
        //   if (scream.screamId !== screamIdParam)
         <Scream key={scream.screamId} scream={scream} />
        //   else return <Scream key={scream.screamId} scream={scream} openDialog />;
        // })
      )
      );
  
      return (
        <Grid container spacing={16}>
          <Grid item sm={8} xs={12}>
            {screamsMarkup}
          </Grid>
          <Grid item sm={4} xs={12}>
            {this.state.profile === null ? (
              <p>Loading Data...</p>
            ) : (
              <StaticProfile profile={this.state.profile} />
            )}
          </Grid>
        </Grid>
      );
    }
  }

user.propTypes = {
    getUserData: PropTypes.func.isRequired,
    data: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    data: state.data
  });
  
  export default connect(
    mapStateToProps,
    { getUserData }
  )(user);

---added code in StaticProfile.js

import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI
import MuiLink from '@material-ui/core/Link';
import Paper from '@material-ui/core/Paper';
// import Typography from '@material-ui/core/Typography';
// Icons
import LocationOn from '@material-ui/icons/LocationOn';
// import LinkIcon from '@material-ui/icons/Link';
import CalendarToday from '@material-ui/icons/CalendarToday';

const styles = {
    paper: {
        padding: 20
      },
      profile: {
        '& .image-wrapper': {
          textAlign: 'center',
          position: 'relative'
        },
        '& .profile-image': {
          width: 200,
          height: 200,
          objectFit: 'cover',
          maxWidth: '100%',
          borderRadius: '50%'
        },
        '& .profile-details': {
          textAlign: 'center',
          '& span, svg': {
            verticalAlign: 'middle'
          },
          '& a': {
            color: '#00bcd4'
          }
        },
        '& hr': {
          border: 'none',
          margin: '0 0 10px 0'
        }
}
}

const StaticProfile = (props) => {
    const {
      classes,
      profile: { handle, createdAt, imageUrl, location }
    } = props;
  
    return (
      <Paper className={classes.paper}>
        <div className={classes.profile}>
          <div className="image-wrapper">
            <img src={imageUrl} alt="profile" className="profile-image" />
          </div>
          <hr />
          <div className="profile-details">
            <MuiLink
              component={Link}
              to={`/users/${handle}`}
              color="primary"
              variant="h5"
            >
              {handle}
            </MuiLink>
            <hr />
            {location && (
              <Fragment>
                <LocationOn color="primary" /> <span>{location}</span>
                <hr />
              </Fragment>
            )}
            <CalendarToday color="primary" />{' '}
            <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>
          </div>
        </div>
      </Paper>
    );
  };
  

StaticProfile.propTypes = {
    profile: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired
  };
  
  export default withStyles(styles)(StaticProfile);

---added code in App.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import jwtDecode from 'jwt-decode';

//Components
import Navbar from './components/layout/Navbar';
import AuthRoute from './util/AuthRoute';

// Redux
import { Provider } from 'react-redux';
import store from './redux/store';
import { SET_AUTHENTICATED } from './redux/types';
import { logoutUser, getUserData } from './redux/actions/userActions';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';
import user from './pages/user';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariants: true
  },
  form: {
    textAlign: 'center'
},
image: {
    margin: '20px auto 20px auto'
},
pageTitle: {
    margin: '10px auto 10px auto'
},
textField: {
    margin: '10px auto 10px auto'
},
button: {
    marginTop: 30,
    position: 'relative'
},
customError: {
    color: 'red',
    fontSize: '0.8rem',
    marginTop: 10
},
progress: {
    position: 'absolute'
}
});

const token = localStorage.FBIdToken;
if (token) {
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp * 1000 < Date.now()) {
    store.dispatch(logoutUser());
    window.location.href = '/login';
  } else {
    store.dispatch({ type: SET_AUTHENTICATED });
    axios.defaults.headers.common['Authorization'] = token;
    store.dispatch(getUserData());
  }
}


class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <Provider store={store}>
        <Router>
          <Navbar/>
            <div className="container">          
              <Switch>
                <Route 
                exact path="/" 
                component={home}/>
                <AuthRoute 
                exact path="/login" 
                component={login} 
                />
                <AuthRoute 
                exact path="/signup" 
                component={signup} 
                />
                <Route exact path="/users/:handle" component={user}/>
                {/* <Route
                  exact
                  path="/users/:handle/scream/:screamId"
                  component={user}
                /> */}
              </Switch>
             </div>
         </Router>
       </Provider>
     </MuiThemeProvider>
   );
  }
 }

export default App;

---added code in dataActions.js

import {
    SET_SCREAMS,
    LOADING_DATA,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    DELETE_SCREAM,
    SET_ERRORS,
    POST_SCREAM,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_SCREAM,
    STOP_LOADING_UI,
    SUBMIT_COMMENT
  } from '../types';

  import axios from 'axios';

  // Get all screams
export const getScreams = () => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get('/screams')
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data
        });
      })
      .catch((err) => {
        dispatch({
          type: SET_SCREAMS,
          payload: []
        });
      });
  };

  //Get One Scream
  export const getScream = (screamId) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .get(`/scream/${screamId}`)
      .then((res) => {
        dispatch({
          type: SET_SCREAM,
          payload: res.data
        });
        dispatch({ type: STOP_LOADING_UI });
      })
      .catch((err) => console.log(err));
  };

  // Post a scream
export const postScream = (newScream) => (dispatch) => {
  dispatch({ type: LOADING_UI });
  axios
    .post('/scream', newScream)
    .then((res) => {
      dispatch({
        type: POST_SCREAM,
        payload: res.data
      });
      dispatch(clearErrors());
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  // Like a scream
export const likeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/like`)
      .then((res) => {
        dispatch({
          type: LIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };
  // Unlike a scream
  export const unlikeScream = (screamId) => (dispatch) => {
    axios
      .get(`/scream/${screamId}/unlike`)
      .then((res) => {
        dispatch({
          type: UNLIKE_SCREAM,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  // Submit a comment
export const submitComment = (screamId, commentData) => (dispatch) => {
  axios
    .post(`/scream/${screamId}/comment`, commentData)
    .then((res) => {
      dispatch({
        type: SUBMIT_COMMENT,
        payload: res.data
      });
      dispatch(clearErrors());
    })
    .catch((err) => {
      dispatch({
        type: SET_ERRORS,
        payload: err.response.data
      });
    });
};

  //Delete a Scream
  export const deleteScream = (screamId) => (dispatch) => {
    axios
      .delete(`/scream/${screamId}`)
      .then(() => {
        dispatch({ type: DELETE_SCREAM, payload: screamId });
      })
      .catch((err) => console.log(err));
  };

// Get User Data or for user page

  export const getUserData = (userHandle) => (dispatch) => {
    dispatch({ type: LOADING_DATA });
    axios
      .get(`/user/${userHandle}`)
      .then((res) => {
        dispatch({
          type: SET_SCREAMS,
          payload: res.data.screams
        });
      })
      .catch(() => {
        dispatch({
          type: SET_SCREAMS,
          payload: null
        });
      });
  };  
  
  export const clearErrors = () => (dispatch) => {
    dispatch({ type: CLEAR_ERRORS });
  };

---so we can see the static profile of any user

*********notifications***********

---if we go to /users/:handle/scream/:screamId we will go to the particular scream of
   particular id

---added code in App.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import './App.css';
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import jwtDecode from 'jwt-decode';

//Components
import Navbar from './components/layout/Navbar';
import AuthRoute from './util/AuthRoute';

// Redux
import { Provider } from 'react-redux';
import store from './redux/store';
import { SET_AUTHENTICATED } from './redux/types';
import { logoutUser, getUserData } from './redux/actions/userActions';

//Pages
import home from './pages/home';
import login from './pages/login';
import signup from './pages/signup';
import user from './pages/user';

import axios from 'axios';


axios.defaults.baseURL =
   'https://europe-west1-practise-58dec.cloudfunctions.net/api';

const theme = createMuiTheme({
  palette: {
    primary: {
      light: '#33c9dc',
      main: '#00bcd4',
      dark: '#008394',
      contrastText: '#fff'
    },
    secondary: {
      light: '#ff6333',
      main: '#ff3d00',
      dark: '#b22a00',
      contrastText: '#fff'
    }
  },
  typography: {
    useNextVariants: true
  },
  form: {
    textAlign: 'center'
},
image: {
    margin: '20px auto 20px auto'
},
pageTitle: {
    margin: '10px auto 10px auto'
},
textField: {
    margin: '10px auto 10px auto'
},
button: {
    marginTop: 30,
    position: 'relative'
},
customError: {
    color: 'red',
    fontSize: '0.8rem',
    marginTop: 10
},
progress: {
    position: 'absolute'
}
});

const token = localStorage.FBIdToken;
if (token) {
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp * 1000 < Date.now()) {
    store.dispatch(logoutUser());
    window.location.href = '/login';
  } else {
    store.dispatch({ type: SET_AUTHENTICATED });
    axios.defaults.headers.common['Authorization'] = token;
    store.dispatch(getUserData());
  }
}


class App extends Component {
  render() {
  return (
    <MuiThemeProvider theme={theme}>
      <Provider store={store}>
        <Router>
          <Navbar/>
            <div className="container">          
              <Switch>
                <Route 
                exact path="/" 
                component={home}/>
                <AuthRoute 
                exact path="/login" 
                component={login} 
                />
                <AuthRoute 
                exact path="/signup" 
                component={signup} 
                />
                <Route exact path="/users/:handle" component={user}/>
                <Route
                  exact
                  path="/users/:handle/scream/:screamId"
                  component={user}
                />
              </Switch>
             </div>
         </Router>
       </Provider>
     </MuiThemeProvider>
   );
  }
 }

export default App;

---added code in user.js

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import Scream from '../components/scream/Scream';
import StaticProfile from '../components/profile/StaticProfile';
import Grid from '@material-ui/core/Grid';

// import ScreamSkeleton from '../util/ScreamSkeleton';
// import ProfileSkeleton from '../util/ProfileSkeleton';

import { connect } from 'react-redux';
import { getUserData } from '../redux/actions/dataActions';

class user extends Component {
    state = {
      profile: null,
      screamIdParam: null
    };
    componentDidMount() {
      const handle = this.props.match.params.handle;
      const screamId = this.props.match.params.screamId;
  
      if (screamId) this.setState({ screamIdParam: screamId });
  
      this.props.getUserData(handle);
      axios
        .get(`/user/${handle}`)
        .then((res) => {
          this.setState({
            profile: res.data.user
          });
        })
        .catch((err) => console.log(err));
    }
    render() {
      const { screams, loading } = this.props.data;
      const { screamIdParam } = this.state;
  
      const screamsMarkup = loading ? (
        <p>Loading data...</p>
      ) : screams === null ? (
        <p>No screams from this user</p>
      ) : !screamIdParam ? (
        screams.map((scream) => <Scream key={scream.screamId} scream={scream} />)
      ) : (
        screams.map((scream) => {
          if (scream.screamId !== screamIdParam)
          return <Scream key={scream.screamId} scream={scream} />;
          else return <Scream key={scream.screamId} scream={scream} openDialog />;
        })
      );
  
      return (
        <Grid container spacing={16}>
          <Grid item sm={8} xs={12}>
            {screamsMarkup}
          </Grid>
          <Grid item sm={4} xs={12}>
            {this.state.profile === null ? (
              <p>Loading Data...</p>
            ) : (
              <StaticProfile profile={this.state.profile} />
            )}
          </Grid>
        </Grid>
      );
    }
  }

user.propTypes = {
    getUserData: PropTypes.func.isRequired,
    data: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    data: state.data
  });
  
  export default connect(
    mapStateToProps,
    { getUserData }
  )(user);

---added code in Scream.js

import React, { Component } from 'react';
import withStyles from '@material-ui/core/styles/withStyles';
import {Link} from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
import MyButton from '../../util/MyButton';
import DeleteScream from './DeleteScream';
import ScreamDialog from './ScreamDialog';
import LikeButton from './LikeButton';

//MUI stuff
//import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
//import CardActionArea from '@material-ui/core/CardActionArea';
//import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
//import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';

// Icons
import ChatIcon from '@material-ui/icons/Chat';
// import FavoriteIcon from '@material-ui/icons/Favorite';
// import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';


// Redux
import { connect } from 'react-redux';
// import { likeScream, unlikeScream } from '../../redux/actions/dataActions';


const styles = {
    card: {
        position: 'relative',
        display: 'flex',
        marginBottom: 20
    },
    image: {
        minWidth: 200
    },
    content: {
        padding: 25,
        objectFit: 'cover'
    }
};


class Scream extends Component {
    render() {
        // console.log(this.props.scream)
        dayjs.extend(relativeTime)
        const {
            classes,
            scream: {
              body,
              createdAt,
              userImage,
              userHandle,
              screamId,
              likeCount,
              commentCount
            },
            user: {
              authenticated,
              credentials: { handle }
            }
          } = this.props;

         const deleteButton =
         authenticated && userHandle === handle ? (
         <DeleteScream screamId={screamId} />
    ) :  null;
        
        return (
            <Card className={classes.card}>
                <CardMedia image={userImage} title="Profile image" className={classes.image} />
                <CardContent className={classes.content}>
                <Typography
                variant="h5"
                component={Link}
                to={`/users/${userHandle}`}
                color="primary">
                    {userHandle}
                </Typography>
                {deleteButton}
                <Typography
                variant="body1"
                color="textSecondary">
                    {body}
                </Typography>
                <Typography
                variant="body2">
                    {dayjs(createdAt).fromNow()}
                </Typography>
                <LikeButton screamId={screamId}/>
          <span>{likeCount} Likes</span>
          <MyButton tip="comments">
            <ChatIcon color="primary" />
          </MyButton>
          <span>{commentCount} comments</span>
          <ScreamDialog
            screamId={screamId}
            userHandle={userHandle}
            openDialog={this.props.openDialog}
          />
                </CardContent>
            </Card>
        );
    }

}

Scream.propTypes = {
    user: PropTypes.object.isRequired,
    scream: PropTypes.object.isRequired,
    classes: PropTypes.object.isRequired,
    openDialog: PropTypes.bool
  };

  const mapStateToProps = (state) => ({
  user: state.user
});
  
export default connect(mapStateToProps)(withStyles(styles)(Scream));

---added code in ScreamDialog.js

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../../util/MyButton';
import LikeButton from './LikeButton';
import Comments from './Comments';
import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream, clearErrors } from '../../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    visibleSeperator: {
      width: '100%',
      borderBottom: '1px solid rgba(0, 0, 0, 0.1)',
      marginBottom: 20
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false
    //   oldPath: '',
    //   newPath: ''
    };
    componentDidMount() {
      if (this.props.openDialog) {
        this.handleOpen();
      }
    }
    handleOpen = () => {
        this.setState({ open: true });
        this.props.getScream(this.props.screamId);
    }
    handleClose = () => {
        this.setState({ open: false });
        this.props.clearErrors();
    }

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span>
              </Grid>
              <hr className={classes.visibleSeparator} />
              <CommentForm screamId={screamId} />
              <Comments comments={comments} />
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream,
    clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

---changed the code in ScreamDialog.js(if we will go see someone scream, path will change and when 
   we will be back, url will change again)

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import withStyles from '@material-ui/core/styles/withStyles';
import MyButton from '../../util/MyButton';
import LikeButton from './LikeButton';
import Comments from './Comments';
import CommentForm from './CommentForm';
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
// MUI Stuff
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import CircularProgress from '@material-ui/core/CircularProgress';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
// Icons
import CloseIcon from '@material-ui/icons/Close';
import UnfoldMore from '@material-ui/icons/UnfoldMore';
import ChatIcon from '@material-ui/icons/Chat';
// Redux stuff
import { connect } from 'react-redux';
import { getScream, clearErrors } from '../../redux/actions/dataActions';

const styles = {
    invisibleSeperator: {
        border: 'none',
        margin: 4
    },
    visibleSeperator: {
      width: '100%',
      borderBottom: '1px solid rgba(0, 0, 0, 0.1)',
      marginBottom: 20
    },
    profileImage: {
      maxWidth: 200,
      height: 200,
      borderRadius: '50%',
      objectFit: 'cover'
    },
    dialogContent: {
      padding: 20
    },
    closeButton: {
      position: 'absolute',
      left: '90%'
    },
    expandButton: {
      position: 'absolute',
      left: '90%'
    },
    spinnerDiv: {
      textAlign: 'center',
      marginTop: 50,
      marginBottom: 50
    }
  };

  class ScreamDialog extends Component {
    state = {
      open: false,
      oldPath: '',
      newPath: ''
    };
    componentDidMount() {
      if (this.props.openDialog) {
        this.handleOpen();
      }
    }
    handleOpen = () => {
      let oldPath = window.location.pathname;
  
      const { userHandle, screamId } = this.props;
      const newPath = `/users/${userHandle}/scream/${screamId}`;
  
      if (oldPath === newPath) oldPath = `/users/${userHandle}`;
  
      window.history.pushState(null, null, newPath);
  
      this.setState({ open: true, oldPath, newPath });
      this.props.getScream(this.props.screamId);
    };
    handleClose = () => {
      window.history.pushState(null, null, this.state.oldPath);
      this.setState({ open: false });
      this.props.clearErrors();
    };

    render() {
        const {
            classes,
            scream: {
              screamId,
              body,
              createdAt,
              likeCount,
              commentCount,
              userImage,
              userHandle,
              comments
            },
            UI: { loading }
          } = this.props;

          const dialogMarkup = loading ? (
            <div className={classes.spinnerDiv}>
              <CircularProgress size={200} thickness={2} />
            </div>
          ) : (
            <Grid container spacing={16}>
              <Grid item sm={5}>
                <img src={userImage} alt="Profile" className={classes.profileImage} />
              </Grid>
              <Grid item sm={7}>
                <Typography
                  component={Link}
                  color="primary"
                  variant="h5"
                  to={`/users/${userHandle}`}
                >
                  {userHandle}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body2" color="textSecondary">
                  {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}
                </Typography>
                <hr className={classes.invisibleSeparator} />
                <Typography variant="body1">{body}</Typography>
                <LikeButton screamId={screamId} />
                <span>{likeCount} likes</span>
                <MyButton tip="comments">
                  <ChatIcon color="primary" />
                </MyButton>
                <span>{commentCount} comments</span>
              </Grid>
              <hr className={classes.visibleSeparator} />
              <CommentForm screamId={screamId} />
              <Comments comments={comments} />
            </Grid>
          );

          return (
            <Fragment>
              <MyButton
                onClick={this.handleOpen}
                tip="Expand scream"
                tipClassName={classes.expandButton}
              >
                <UnfoldMore color="primary" />
              </MyButton>
              <Dialog
                open={this.state.open}
                onClose={this.handleClose}
                fullWidth
                maxWidth="sm"
              >
                <MyButton
                  tip="Close"
                  onClick={this.handleClose}
                  tipClassName={classes.closeButton}
                >
                  <CloseIcon />
                </MyButton>
                <DialogContent className={classes.dialogContent}>
                  {dialogMarkup}
                </DialogContent>
              </Dialog>
            </Fragment>
          );
        }
      }
    
  
  ScreamDialog.propTypes = {
    clearErrors: PropTypes.func.isRequired,
    getScream: PropTypes.func.isRequired,
    screamId: PropTypes.string.isRequired,
    userHandle: PropTypes.string.isRequired,
    scream: PropTypes.object.isRequired,
    UI: PropTypes.object.isRequired
  };
  
  const mapStateToProps = (state) => ({
    scream: state.data.scream,
    UI: state.UI
  });
  
  const mapActionsToProps = {
    getScream,
    clearErrors
  };
  
  export default connect(
    mapStateToProps,
    mapActionsToProps
  )(withStyles(styles)(ScreamDialog));

---now for adding notifications
---added code in types.js

// User reducer types
export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';
export const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';
export const SET_USER = 'SET_USER';
export const LOADING_USER = 'LOADING_USER';
export const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';
// UI reducer types
export const SET_ERRORS = 'SET_ERRORS';
export const LOADING_UI = 'LOADING_UI';
export const CLEAR_ERRORS = 'CLEAR_ERRORS';
export const LOADING_DATA = 'LOADING_DATA';
export const STOP_LOADING_UI = 'STOP_LOADING_UI';
// Data reducer types
export const SET_SCREAMS = 'SET_SCREAMS';
export const SET_SCREAM = 'SET_SCREAM';
export const LIKE_SCREAM = 'LIKE_SCREAM';
export const UNLIKE_SCREAM = 'UNLIKE_SCREAM';
export const DELETE_SCREAM = 'DELETE_SCREAM';
export const POST_SCREAM = 'POST_SCREAM';
export const SUBMIT_COMMENT = 'SUBMIT_COMMENT';

---added code in userActions.js

import {
    SET_USER,
    SET_ERRORS,
    CLEAR_ERRORS,
    LOADING_UI,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    MARK_NOTIFICATIONS_READ
  } from '../types';

  import axios from 'axios';

  export const loginUser = (userData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/login', userData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const signupUser = (newUserData, history) => (dispatch) => {
    dispatch({ type: LOADING_UI });
    axios
      .post('/signup', newUserData)
      .then((res) => {
        setAuthorizationHeader(res.data.token)
        dispatch(getUserData());
        dispatch({ type: CLEAR_ERRORS });
        history.push('/');
    })
      .catch((err) => {
        dispatch({
            type: SET_ERRORS,
            payload: err.response.data
        });
      });
  };

  export const logoutUser = () => (dispatch) => {
    localStorage.removeItem('FBIdToken');
    delete axios.defaults.headers.common['Authorization'];
    dispatch({ type: SET_UNAUTHENTICATED });
  };

  export const getUserData = () => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .get('/user')
      .then((res) => {
        dispatch({
          type: SET_USER,
          payload: res.data
        });
      })
      .catch((err) => console.log(err));
  };

  export const uploadImage = (formData) => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .post('/user/image', formData)
      .then(() => {
        dispatch(getUserData());
      })
      .catch((err) => console.log(err));
  };

  export const editUserDetails = (userDetails) => (dispatch) => {
    dispatch({ type: LOADING_USER });
    axios
      .post('/user', userDetails)
      .then(() => {
        dispatch(getUserData());
      })
      .catch((err) => console.log(err));
  };

  export const markNotificationsRead = (notificationIds) => (dispatch) => {
    axios
      .post('/notifications', notificationIds)
      .then((res) => {
        dispatch({
          type: MARK_NOTIFICATIONS_READ
        });
      })
      .catch((err) => console.log(err));
  };

  const setAuthorizationHeader = (token) => {
    const FBIdToken = `Bearer ${token}`;
    localStorage.setItem('FBIdToken', FBIdToken);
    axios.defaults.headers.common['Authorization'] = FBIdToken;
  };

---added code in userReducer.js

import {
    SET_USER,
    // SET_ERRORS,
    // CLEAR_ERRORS,
    // LOADING_UI,
    SET_AUTHENTICATED,
    SET_UNAUTHENTICATED,
    LOADING_USER,
    LIKE_SCREAM,
    UNLIKE_SCREAM,
    MARK_NOTIFICATIONS_READ
  } from '../types';
  
  const initialState = {
    authenticated: false,
    loading: false,
    credentials: {},
    likes: [],
    notifications: []
  };

  export default function(state = initialState, action) {
    switch (action.type) {
      case SET_AUTHENTICATED:
        return {
          ...state,
          authenticated: true
        };
        case SET_UNAUTHENTICATED:
            return initialState;
          case SET_USER:
            return {
              authenticated: true,
              loading: false,
              ...action.payload
            };
            case LOADING_USER:
              return {
                ...state,
                loading: true
              };
              case LIKE_SCREAM:
      return {
        ...state,
        likes: [
          ...state.likes,
          {
            userHandle: state.credentials.handle,
            screamId: action.payload.screamId
          }
        ]
      };
    case UNLIKE_SCREAM:
      return {
        ...state,
        likes: state.likes.filter(
          (like) => like.screamId !== action.payload.screamId
        )
      };
    case MARK_NOTIFICATIONS_READ:
      state.notifications.forEach((not) => (not.read = true));
      return {
        ...state
      };
    default:
      return state;
      }
}

---added code in Navbar.js

import React, { Component, Fragment } from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import MyButton from '../../util/MyButton';
import PostScream from '../scream/PostScream';
import Notifications from './Notifications';
// MUI stuff
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
// Icons
import HomeIcon from '@material-ui/icons/Home';

class Navbar extends Component {
    render() {
      const { authenticated } = this.props;
      return (
        <AppBar>
          <Toolbar className="nav-container">
            {authenticated ? (
              <Fragment>
                <PostScream/>
                  <Link to="/">
                  <MyButton tip="Home">
                    <HomeIcon />
                  </MyButton>
                </Link>
                    <Notifications />
              </Fragment>
            ) : (
              <Fragment>
                <Button color="inherit" component={Link} to="/login">
                  Login
                </Button>
                <Button color="inherit" component={Link} to="/">
                  Home
                </Button>
                <Button color="inherit" component={Link} to="/signup">
                  Signup
                </Button>
              </Fragment>
            )}
          </Toolbar>
        </AppBar>
      );
    }
  }

Navbar.propTypes = {
    authenticated: PropTypes.bool.isRequired
  };
  
  const mapStateToProps = (state) => ({
    authenticated: state.user.authenticated
  });

export default connect(mapStateToProps)(Navbar);

---added code in Notifications.js

import React, { Component, Fragment } from 'react';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import PropTypes from 'prop-types';
// MUI stuff
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import Badge from '@material-ui/core/Badge';
// Icons
import NotificationsIcon from '@material-ui/icons/Notifications';
import FavoriteIcon from '@material-ui/icons/Favorite';
import ChatIcon from '@material-ui/icons/Chat';
// Redux
import { connect } from 'react-redux';
import { markNotificationsRead } from '../../redux/actions/userActions';

class Notifications extends Component {
    state = {
      anchorEl: null
    };
    handleOpen = (event) => {
      this.setState({ anchorEl: event.target });
    };
    handleClose = () => {
      this.setState({ anchorEl: null });
    };
    onMenuOpened = () => {
      let unreadNotificationsIds = this.props.notifications
        .filter((not) => !not.read)
        .map((not) => not.notificationId);
      this.props.markNotificationsRead(unreadNotificationsIds);
    };
    render() {
        const notifications = this.props.notifications;
        const anchorEl = this.state.anchorEl;

        dayjs.extend(relativeTime);

        let notificationsIcon;
        if (notifications && notifications.length > 0) {
            notifications.filter((not) => not.read === false).length > 0
              ? (notificationsIcon = (
                  <Badge
                    badgeContent={
                      notifications.filter((not) => not.read === false).length
                    }
                    color="secondary"
                  >
                    <NotificationsIcon />
                  </Badge>
                ))
              : (notificationsIcon = <NotificationsIcon />);
          } else {
            notificationsIcon = <NotificationsIcon />;
          }

          let notificationsMarkup =
            notifications && notifications.length > 0 ? (
            notifications.map((not) => {
          const verb = not.type === 'like' ? 'liked' : 'commented on';
          const time = dayjs(not.createdAt).fromNow();
          const iconColor = not.read ? 'primary' : 'secondary';
          const icon =
            not.type === 'like' ? (
              <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />
            ) : (
              <ChatIcon color={iconColor} style={{ marginRight: 10 }} />
            )

            return (
              <MenuItem key={not.createdAt}
              onClick={this.handleClose}>
                {icon}
                <Typography
                component={Link}
                color="default"
                variant="body1"
                to={`/users/${not.recipient}/scream/${not.screamId}`}
                >
                  {not.sender} {verb} your scream {time}
                </Typography>

              </MenuItem>
            )

            })
            ) : (
              <MenuItem onClick={this.handleClose}>
                You have no notifications yet
              </MenuItem>
            )
            
          return (
              <Fragment>
                  <Tooltip placement="top"
                  title="Notifications">
                      <IconButton aria-owns={anchorEl ? 'simple-menu' : undefined}
                      aria-haspopup="true"
                      onClick={this.handleOpen}
                      >
                        {notificationsIcon}
                      </IconButton>
                  </Tooltip>
                  <Menu
                  anchorEl={anchorEl}
                  open={Boolean(anchorEl)}
                  onClose={this.handleClose}
                  onEntered={this.onMenuOpened}
                  >
                    {notificationsMarkup}
                  </Menu>
              </Fragment>
          )
        }
    }
  

Notifications.propTypes = {
    markNotificationsRead: PropTypes.func.isRequired,
    notifications: PropTypes.array.isRequired
  };
  
  const mapStateToProps = (state) => ({
    notifications: state.user.notifications
  });
  
  export default connect(
    mapStateToProps,
    { markNotificationsRead }
  )(Notifications);

---so we can see notifications

***********Loading Skeletons*********
















































 














































 
